{"file_contents":{"design_guidelines.md":{"content":"# Lavadero Moderno - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern service apps like Uber, Rappi, and booking platforms, emphasizing clean mobile-first design with professional service industry aesthetics.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Brand Blue: 215 85% 35% (professional, trustworthy)\n- Success Green: 145 70% 45% (confirmations, completed services)\n\n**Light Mode:**\n- Background: 0 0% 98%\n- Surface: 0 0% 100%\n- Text Primary: 220 15% 15%\n- Text Secondary: 220 10% 45%\n\n**Dark Mode:**\n- Background: 220 15% 8%\n- Surface: 220 15% 12%\n- Text Primary: 0 0% 95%\n- Text Secondary: 220 10% 70%\n\n**Accent Colors:**\n- Warning Orange: 35 90% 55% (alerts, pending status)\n- Neutral Gray: 220 10% 50% (borders, disabled states)\n\n### Typography\n- **Primary Font**: Inter (Google Fonts) - clean, modern sans-serif\n- **Headings**: 600-700 weight, sizes 24px-32px\n- **Body Text**: 400-500 weight, 14px-16px\n- **Captions**: 400 weight, 12px-14px\n\n### Layout System\n**Tailwind Spacing Units**: Consistent use of 2, 4, 6, 8, 12, 16\n- **Micro spacing**: p-2, m-2 (8px)\n- **Standard spacing**: p-4, m-4 (16px)\n- **Section spacing**: p-8, m-8 (32px)\n- **Large spacing**: p-12, m-12 (48px)\n\n### Component Library\n\n**Navigation:**\n- Bottom tab navigation for mobile (Customer app)\n- Sidebar navigation for desktop (Admin panel)\n- Clean header with service status indicators\n\n**Forms:**\n- Floating label inputs with subtle borders\n- Rounded corners (rounded-lg)\n- Focus states with brand blue accent\n- Form validation with inline messaging\n\n**Cards:**\n- Service cards with subtle shadows (shadow-sm)\n- Rounded corners (rounded-xl)\n- Status indicators with color coding\n- Clean typography hierarchy\n\n**Buttons:**\n- Primary: Brand blue background, white text\n- Secondary: Outline style with brand blue border\n- Success: Green background for confirmations\n- Rounded-lg corners, adequate padding (px-6 py-3)\n\n**Data Displays:**\n- Clean tables for admin analytics\n- Status badges with appropriate colors\n- Progress indicators for service tracking\n- Charts with consistent brand colors\n\n**Overlays:**\n- Modal dialogs with backdrop blur\n- Toast notifications for status updates\n- Confirmation dialogs for critical actions\n\n### Mobile-First Considerations\n- Touch-friendly button sizes (minimum 44px height)\n- Swipe gestures for service management\n- Clear visual hierarchy for small screens\n- Optimized spacing for thumb navigation\n\n### Service Industry Aesthetics\n- Professional color scheme conveying trust\n- Clean, minimalist interface reducing cognitive load\n- Status-driven design with clear visual feedback\n- Emphasis on efficiency and clarity over decoration\n\n### Images\n**Hero Images:** No large hero images required. Focus on functional interface elements.\n\n**Service Images:**\n- Small service type icons (washing, detailing, etc.)\n- Before/after photo galleries in customer history\n- Vehicle type illustrations for service selection\n- Profile avatars for customers and staff\n\n**Placement:**\n- Service selection: Small icons alongside text\n- History sections: Thumbnail galleries\n- Admin dashboard: Data visualization graphics\n- Onboarding: Simple illustration elements\n\n### Key Design Principles\n1. **Clarity First**: Every element serves a functional purpose\n2. **Status Transparency**: Clear visual feedback for all service states\n3. **Efficiency**: Minimal clicks to complete core tasks\n4. **Professional Trust**: Clean, reliable visual language\n5. **Mobile Optimization**: Thumb-friendly navigation and interactions","size_bytes":3590},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nMilos'Shop is a modern car wash booking application designed for Paraguay. The application provides a comprehensive solution for managing car wash services with a clean, mobile-first design inspired by modern service apps like Uber and Rappi. The system features dual interfaces for customers and administrators, supporting both Spanish and Portuguese languages.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite for fast development and building\n- **UI Library**: Radix UI components with shadcn/ui component system for consistent, accessible interfaces\n- **Styling**: Tailwind CSS with custom theme implementing the brand color scheme (black background, white cards, red accent #E10600)\n- **Routing**: Wouter for lightweight client-side routing with three main routes: home (`/`), client portal (`/cliente`), and admin panel (`/admin`)\n- **State Management**: TanStack Query for server state management and React hooks for local state\n- **Design System**: Mobile-first responsive design with Inter/Montserrat typography, consistent spacing units, and comprehensive component library\n\n## Backend Architecture\n- **Server**: Express.js with TypeScript running on Node.js\n- **API**: RESTful API structure with `/api` prefix for all endpoints\n- **Session Management**: Express sessions with PostgreSQL session store using connect-pg-simple\n- **Build System**: esbuild for production bundling with ES modules format\n\n## Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Connection**: Neon Database serverless PostgreSQL for cloud hosting\n- **Current Schema**: Basic user management with plans for booking, service, and payment entities\n\n## Authentication and Authorization\n- **Architecture**: Session-based authentication (current implementation shows basic user schema)\n- **User Roles**: Planned support for 'client' and 'admin' roles based on design specifications\n- **Security**: Express session middleware with PostgreSQL persistence\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon Database (@neondatabase/serverless) for PostgreSQL hosting\n- **ORM**: Drizzle ORM for database operations with Zod integration for validation\n\n### UI and Design\n- **Component Library**: Complete Radix UI ecosystem for accessible, unstyled components\n- **Icons**: Lucide React for consistent iconography\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Carousels**: Embla Carousel for image galleries and content sliders\n\n### Development Tools\n- **Build**: Vite with React plugin and TypeScript support\n- **Development**: tsx for TypeScript execution and hot reloading\n- **Linting**: PostCSS with Tailwind CSS and Autoprefixer\n- **Replit Integration**: Custom plugins for development environment integration\n\n### Planned Integrations (based on specifications)\n- **Payment Processing**: Card, PIX, and cash payment methods\n- **Push Notifications**: Firebase Cloud Messaging (FCM) for real-time updates\n- **File Storage**: Image handling for service galleries\n- **Analytics**: Google Analytics for business insights\n\n## Service Management\nThe application is designed to handle multiple car wash services with dynamic pricing based on vehicle type (auto, SUV, camioneta). Services include basic wash, premium treatments, and specialized detailing with estimated duration tracking.\n\n## Internationalization\nBuilt-in support for Spanish and Portuguese languages with a comprehensive translation system and locale-aware formatting for currency (Paraguayan Guaran√≠) and dates.","size_bytes":3769},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport path from 'path';\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Serve static files from attached_assets directory\n  const attachedAssetsPath = path.join(process.cwd(), 'attached_assets');\n  app.use('/attached_assets', express.static(attachedAssetsPath));\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2290},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport multer from 'multer';\nimport path from 'path';\nimport fs from 'fs';\nimport { storage } from \"./storage\";\nimport { insertServiceSchema, insertUserSchema, insertVehicleSchema, insertBookingSchema, insertPaymentSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Services API\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await storage.getAllServices();\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching services:\", error);\n      res.status(500).json({ error: \"Failed to fetch services\" });\n    }\n  });\n\n  app.get(\"/api/services/:id\", async (req, res) => {\n    try {\n      const service = await storage.getService(req.params.id);\n      if (!service) {\n        return res.status(404).json({ error: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error fetching service:\", error);\n      res.status(500).json({ error: \"Failed to fetch service\" });\n    }\n  });\n\n  // Users API\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists by phone - return existing user if found\n      const existingUser = await storage.getUserByPhone(userData.phone);\n      if (existingUser) {\n        return res.status(200).json(existingUser);\n      }\n      \n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid user data\", details: error.errors });\n      }\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // Vehicles API\n  app.get(\"/api/users/:userId/vehicles\", async (req, res) => {\n    try {\n      const vehicles = await storage.getUserVehicles(req.params.userId);\n      res.json(vehicles);\n    } catch (error) {\n      console.error(\"Error fetching user vehicles:\", error);\n      res.status(500).json({ error: \"Failed to fetch vehicles\" });\n    }\n  });\n\n  app.post(\"/api/vehicles\", async (req, res) => {\n    try {\n      const vehicleData = insertVehicleSchema.parse(req.body);\n      const vehicle = await storage.createVehicle(vehicleData);\n      res.status(201).json(vehicle);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid vehicle data\", details: error.errors });\n      }\n      console.error(\"Error creating vehicle:\", error);\n      res.status(500).json({ error: \"Failed to create vehicle\" });\n    }\n  });\n\n  // Bookings API\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getTodayBookings();\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ error: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/bookings\", async (req, res) => {\n    try {\n      const bookings = await storage.getUserBookings(req.params.userId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching user bookings:\", error);\n      res.status(500).json({ error: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get(\"/api/bookings/today\", async (req, res) => {\n    try {\n      const bookings = await storage.getTodayBookingsWithDetails();\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching today's bookings:\", error);\n      res.status(500).json({ error: \"Failed to fetch today's bookings\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookingData = insertBookingSchema.parse(req.body);\n      \n      // Validate that service exists and get pricing\n      const service = await storage.getService(bookingData.serviceId);\n      if (!service) {\n        return res.status(404).json({ error: \"Service not found\" });\n      }\n      \n      // Validate that vehicle exists and belongs to user\n      const vehicles = await storage.getUserVehicles(bookingData.userId);\n      const vehicle = vehicles.find(v => v.id === bookingData.vehicleId);\n      if (!vehicle) {\n        return res.status(404).json({ error: \"Vehicle not found or does not belong to user\" });\n      }\n      \n      // Validate price matches service pricing for vehicle type\n      const expectedPrice = service.prices[vehicle.type];\n      if (!expectedPrice || bookingData.price !== expectedPrice) {\n        return res.status(400).json({ \n          error: \"Price mismatch\", \n          expected: expectedPrice, \n          provided: bookingData.price \n        });\n      }\n      \n      const booking = await storage.createBooking(bookingData);\n      \n      // Get full booking details with relations for real-time update\n      const fullBooking = await storage.getTodayBookingsWithDetails();\n      const newBookingDetails = fullBooking.find(b => b.id === booking.id);\n      \n      // Emit real-time update to admin dashboard\n      if (newBookingDetails && app.locals.io) {\n        app.locals.io.to('admin').emit('new-booking', {\n          booking: newBookingDetails,\n          message: `Nueva reserva de ${newBookingDetails.userName} para hoy a las ${newBookingDetails.timeSlot}`\n        });\n        console.log('New booking notification sent to admin:', newBookingDetails.id);\n      }\n      \n      res.status(201).json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid booking data\", details: error.errors });\n      }\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ error: \"Failed to create booking\" });\n    }\n  });\n\n  app.patch(\"/api/bookings/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status || ![\"waiting\", \"washing\", \"done\", \"cancelled\"].includes(status)) {\n        return res.status(400).json({ error: \"Invalid status\" });\n      }\n      \n      const booking = await storage.updateBookingStatus(req.params.id, status);\n      if (!booking) {\n        return res.status(404).json({ error: \"Booking not found\" });\n      }\n      \n      // Get updated booking details for real-time update\n      const fullBookings = await storage.getTodayBookingsWithDetails();\n      const updatedBookingDetails = fullBookings.find(b => b.id === req.params.id);\n      \n      // Emit real-time status update to admin dashboard\n      if (updatedBookingDetails && app.locals.io) {\n        app.locals.io.to('admin').emit('booking-updated', {\n          booking: updatedBookingDetails\n        });\n        console.log('Booking status update sent to admin:', updatedBookingDetails.id, 'new status:', status);\n      }\n      \n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error updating booking status:\", error);\n      res.status(500).json({ error: \"Failed to update booking status\" });\n    }\n  });\n\n  // Payments API\n  app.post(\"/api/payments\", async (req, res) => {\n    try {\n      const paymentData = insertPaymentSchema.parse(req.body);\n      \n      // Verify booking exists before creating payment\n      const booking = await storage.getBooking(paymentData.bookingId);\n      if (!booking) {\n        return res.status(404).json({ error: \"Booking not found\" });\n      }\n      \n      const payment = await storage.createPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid payment data\", details: error.errors });\n      }\n      console.error(\"Error creating payment:\", error);\n      res.status(500).json({ error: \"Failed to create payment\" });\n    }\n  });\n\n  app.patch(\"/api/payments/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status || ![\"pending\", \"paid\", \"failed\"].includes(status)) {\n        return res.status(400).json({ error: \"Invalid payment status\" });\n      }\n      \n      const payment = await storage.updatePaymentStatus(req.params.id, status);\n      if (!payment) {\n        return res.status(404).json({ error: \"Payment not found\" });\n      }\n      \n      res.json(payment);\n    } catch (error) {\n      console.error(\"Error updating payment status:\", error);\n      res.status(500).json({ error: \"Failed to update payment status\" });\n    }\n  });\n\n  // Configure multer for file uploads\n  const uploadDir = path.join(process.cwd(), 'attached_assets', 'service_images');\n  \n  // Ensure upload directory exists\n  if (!fs.existsSync(uploadDir)) {\n    fs.mkdirSync(uploadDir, { recursive: true });\n  }\n  \n  const upload = multer({\n    storage: multer.diskStorage({\n      destination: uploadDir,\n      filename: (req, file, cb) => {\n        // Sanitize serviceSlug to prevent path traversal\n        const rawServiceSlug = req.body.serviceSlug || 'unknown';\n        const serviceSlug = rawServiceSlug.replace(/[^a-z0-9-_]/gi, '_');\n        const timestamp = Date.now();\n        const ext = path.extname(file.originalname);\n        cb(null, `${serviceSlug}-${timestamp}${ext}`);\n      }\n    }),\n    fileFilter: (req, file, cb) => {\n      // Accept only images\n      if (file.mimetype.startsWith('image/')) {\n        cb(null, true);\n      } else {\n        cb(null, false);\n      }\n    },\n    limits: {\n      fileSize: 5 * 1024 * 1024 // 5MB limit\n    }\n  });\n  \n  // Service image upload route\n  app.post('/api/services/upload-image', upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No image file uploaded' });\n      }\n      \n      const { serviceSlug } = req.body;\n      if (!serviceSlug) {\n        return res.status(400).json({ error: 'Service slug is required' });\n      }\n      \n      // Store image path relative to attached_assets\n      const imagePath = `service_images/${req.file.filename}`;\n      \n      // TODO: Update service record with image path if needed\n      // For now, just return success with file info\n      \n      res.json({\n        success: true,\n        message: 'Image uploaded successfully',\n        imageUrl: `/attached_assets/${imagePath}`,\n        filename: req.file.filename,\n        serviceSlug\n      });\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      res.status(500).json({ error: 'Failed to upload image' });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Initialize Socket.IO for real-time updates\n  const io = new SocketIOServer(httpServer, {\n    cors: {\n      origin: \"*\",\n      methods: [\"GET\", \"POST\"]\n    }\n  });\n\n  // Store socket connections\n  const adminSockets = new Set();\n  \n  io.on('connection', (socket) => {\n    console.log('Client connected:', socket.id);\n    \n    // Join admin room for real-time updates (with basic auth)\n    socket.on('join-admin', (authToken) => {\n      // Basic admin auth - in production, use proper JWT or session validation\n      const adminToken = process.env.ADMIN_WS_TOKEN || 'admin-secret-key';\n      \n      if (authToken !== adminToken) {\n        console.log('Unauthorized admin access attempt:', socket.id);\n        socket.emit('auth-error', 'Invalid admin token');\n        return;\n      }\n      \n      console.log('Admin joined:', socket.id);\n      adminSockets.add(socket);\n      socket.join('admin');\n    });\n    \n    socket.on('disconnect', () => {\n      console.log('Client disconnected:', socket.id);\n      adminSockets.delete(socket);\n    });\n  });\n\n  // Make io accessible to routes (store in app.locals)\n  app.locals.io = io;\n\n  return httpServer;\n}\n","size_bytes":12197},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { services } from \"@shared/schema\";\n\nconst seedServices = [\n  {\n    nameKey: \"basic_wash\",\n    title: \"Lavado B√°sico\",\n    description: \"Lavado exterior completo con jab√≥n, enjuague y secado. Incluye llantas y rines.\",\n    prices: {\n      auto: 25000,\n      suv: 30000,\n      camioneta: 35000\n    },\n    durationMin: 30,\n    imageUrl: \"https://images.unsplash.com/photo-1558618047-3c8c76c8d04d?w=400&h=160&fit=crop\",\n    active: true\n  },\n  {\n    nameKey: \"premium_wash\",\n    title: \"Lavado Premium\",\n    description: \"Lavado completo exterior e interior, aspirado, tablero, cristales y perfumado.\",\n    prices: {\n      auto: 45000,\n      suv: 55000,\n      camioneta: 65000\n    },\n    durationMin: 60,\n    imageUrl: \"https://images.unsplash.com/photo-1607860108855-64acf2078ed9?w=400&h=160&fit=crop\",\n    active: true\n  },\n  {\n    nameKey: \"detail_complete\",\n    title: \"Detallado Completo\",\n    description: \"Servicio premium con cera, pulido, tratamiento de cuero y protecci√≥n UV.\",\n    prices: {\n      auto: 80000,\n      suv: 100000,\n      camioneta: 120000\n    },\n    durationMin: 120,\n    imageUrl: \"https://images.unsplash.com/photo-1581235720704-06d3acfcb36f?w=400&h=160&fit=crop\",\n    active: true\n  },\n  {\n    nameKey: \"express_wash\",\n    title: \"Lavado Express\",\n    description: \"Lavado r√°pido exterior, ideal para mantenimiento semanal.\",\n    prices: {\n      auto: 15000,\n      suv: 18000,\n      camioneta: 22000\n    },\n    durationMin: 15,\n    imageUrl: \"https://images.unsplash.com/photo-1520340356584-f9917d1eea6f?w=400&h=160&fit=crop\",\n    active: true\n  },\n  {\n    nameKey: \"engine_wash\",\n    title: \"Lavado de Motor\",\n    description: \"Limpieza especializada del compartimento del motor con productos espec√≠ficos.\",\n    prices: {\n      auto: 35000,\n      suv: 40000,\n      camioneta: 45000\n    },\n    durationMin: 45,\n    imageUrl: \"https://images.unsplash.com/photo-1563659983-0f4cca2dc431?w=400&h=160&fit=crop\",\n    active: true\n  },\n  {\n    nameKey: \"ceramic_coating\",\n    title: \"Recubrimiento Cer√°mico\",\n    description: \"Protecci√≥n avanzada con recubrimiento cer√°mico de larga duraci√≥n.\",\n    prices: {\n      auto: 150000,\n      suv: 180000,\n      camioneta: 220000\n    },\n    durationMin: 180,\n    imageUrl: \"https://images.unsplash.com/photo-1544636331-e26879cd4d9b?w=400&h=160&fit=crop\",\n    active: true\n  }\n];\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"üå± Starting database seeding...\");\n    \n    // Insert services\n    for (const service of seedServices) {\n      await db.insert(services).values([service]).onConflictDoNothing({ target: services.nameKey });\n    }\n    \n    console.log(\"‚úÖ Database seeded successfully!\");\n    console.log(`üìã Added ${seedServices.length} services`);\n    \n  } catch (error) {\n    console.error(\"‚ùå Error seeding database:\", error);\n    throw error;\n  }\n}\n\n// Run seed if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error(error);\n      process.exit(1);\n    });\n}","size_bytes":3124},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Vehicle, type InsertVehicle,\n  type Service, type InsertService,\n  type Booking, type InsertBooking,\n  type Payment, type InsertPayment,\n  type OtpToken, type InsertOtpToken,\n  type MagicLink, type InsertMagicLink,\n  type AdminSession, type InsertAdminSession,\n  type AuditLog, type InsertAuditLog,\n  users, vehicles, services, bookings, payments,\n  otpTokens, magicLinks, adminSessions, auditLog\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql } from \"drizzle-orm\";\n\n// Storage interface for Milos'Shop\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByPhone(phone: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Vehicles\n  getUserVehicles(userId: string): Promise<Vehicle[]>;\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  \n  // Services\n  getAllServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  \n  // Bookings\n  getUserBookings(userId: string): Promise<Booking[]>;\n  getTodayBookings(): Promise<Booking[]>;\n  getTodayBookingsWithDetails(): Promise<any[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBookingStatus(id: string, status: string): Promise<Booking | undefined>;\n  \n  // Payments\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePaymentStatus(id: string, status: string): Promise<Payment | undefined>;\n  \n  // OTP Authentication\n  createOtpToken(otp: InsertOtpToken): Promise<OtpToken>;\n  getValidOtpToken(phone: string, code: string): Promise<OtpToken | undefined>;\n  markOtpAsVerified(id: string): Promise<void>;\n  incrementOtpAttempts(id: string): Promise<void>;\n  \n  // Magic Links\n  createMagicLink(link: InsertMagicLink): Promise<MagicLink>;\n  getMagicLink(token: string): Promise<MagicLink | undefined>;\n  markMagicLinkAsUsed(id: string): Promise<void>;\n  \n  // Admin Sessions\n  createAdminSession(session: InsertAdminSession): Promise<AdminSession>;\n  getValidAdminSession(token: string): Promise<AdminSession | undefined>;\n  deleteAdminSession(token: string): Promise<void>;\n  \n  // Audit Log\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n}\n\n// Database storage implementation\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.phone, phone));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values([insertUser]).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user || undefined;\n  }\n\n  // Vehicles\n  async getUserVehicles(userId: string): Promise<Vehicle[]> {\n    return await db.select().from(vehicles).where(eq(vehicles.userId, userId));\n  }\n\n  async createVehicle(insertVehicle: InsertVehicle): Promise<Vehicle> {\n    const [vehicle] = await db.insert(vehicles).values([insertVehicle]).returning();\n    return vehicle;\n  }\n\n  // Services\n  async getAllServices(): Promise<Service[]> {\n    return await db.select().from(services).where(eq(services.active, true));\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    const [service] = await db.select().from(services).where(eq(services.id, id));\n    return service || undefined;\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const [service] = await db.insert(services).values([insertService as any]).returning();\n    return service;\n  }\n\n  // Bookings\n  async getUserBookings(userId: string): Promise<Booking[]> {\n    return await db.select().from(bookings)\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.createdAt));\n  }\n\n  async getTodayBookings(): Promise<Booking[]> {\n    const today = new Date().toISOString().split('T')[0];\n    return await db.select().from(bookings)\n      .where(eq(bookings.date, today))\n      .orderBy(desc(bookings.createdAt));\n  }\n\n  async getTodayBookingsWithDetails(): Promise<any[]> {\n    const today = new Date().toISOString().split('T')[0];\n    return await db.select({\n      id: bookings.id,\n      userId: bookings.userId,\n      vehicleId: bookings.vehicleId,\n      serviceId: bookings.serviceId,\n      date: bookings.date,\n      timeSlot: bookings.timeSlot,\n      status: bookings.status,\n      price: bookings.price,\n      notes: bookings.notes,\n      createdAt: bookings.createdAt,\n      updatedAt: bookings.updatedAt,\n      // User details\n      userName: users.name,\n      userPhone: users.phone,\n      userEmail: users.email,\n      // Vehicle details\n      vehiclePlate: vehicles.plate,\n      vehicleType: vehicles.type,\n      // Service details\n      serviceName: services.titleEs,\n      serviceTitle: services.title,\n      // Payment info will be handled separately if needed\n    })\n    .from(bookings)\n    .innerJoin(users, eq(bookings.userId, users.id))\n    .innerJoin(vehicles, eq(bookings.vehicleId, vehicles.id))\n    .innerJoin(services, eq(bookings.serviceId, services.id))\n    .where(eq(bookings.date, today))\n    .orderBy(desc(bookings.createdAt));\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const [booking] = await db.insert(bookings).values([insertBooking]).returning();\n    return booking;\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking || undefined;\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<Booking | undefined> {\n    const [booking] = await db.update(bookings)\n      .set({ status: status as any, updatedAt: new Date() })\n      .where(eq(bookings.id, id))\n      .returning();\n    return booking || undefined;\n  }\n\n  // Payments\n  async createPayment(insertPayment: InsertPayment): Promise<Payment> {\n    const [payment] = await db.insert(payments).values([insertPayment]).returning();\n    return payment;\n  }\n\n  async updatePaymentStatus(id: string, status: string): Promise<Payment | undefined> {\n    const [payment] = await db.update(payments)\n      .set({ status: status as any })\n      .where(eq(payments.id, id))\n      .returning();\n    return payment || undefined;\n  }\n\n  // OTP Authentication\n  async createOtpToken(insertOtpToken: InsertOtpToken): Promise<OtpToken> {\n    const [otpToken] = await db.insert(otpTokens).values([insertOtpToken]).returning();\n    return otpToken;\n  }\n\n  async getValidOtpToken(phone: string, code: string): Promise<OtpToken | undefined> {\n    const [otpToken] = await db.select().from(otpTokens).where(\n      eq(otpTokens.phone, phone) && \n      eq(otpTokens.code, code) &&\n      eq(otpTokens.verified, false)\n    ).orderBy(desc(otpTokens.createdAt)).limit(1);\n    \n    if (!otpToken || otpToken.expiresAt < new Date()) {\n      return undefined;\n    }\n    \n    return otpToken;\n  }\n\n  async markOtpAsVerified(id: string): Promise<void> {\n    await db.update(otpTokens).set({ verified: true }).where(eq(otpTokens.id, id));\n  }\n\n  async incrementOtpAttempts(id: string): Promise<void> {\n    await db.update(otpTokens).set({ attempts: sql`attempts + 1` }).where(eq(otpTokens.id, id));\n  }\n\n  // Magic Links\n  async createMagicLink(insertMagicLink: InsertMagicLink): Promise<MagicLink> {\n    const [magicLink] = await db.insert(magicLinks).values([insertMagicLink]).returning();\n    return magicLink;\n  }\n\n  async getMagicLink(token: string): Promise<MagicLink | undefined> {\n    const [magicLink] = await db.select().from(magicLinks).where(\n      eq(magicLinks.token, token)\n    );\n    \n    if (!magicLink || magicLink.expiresAt < new Date() || magicLink.usedAt) {\n      return undefined;\n    }\n    \n    return magicLink;\n  }\n\n  async markMagicLinkAsUsed(id: string): Promise<void> {\n    await db.update(magicLinks).set({ usedAt: new Date() }).where(eq(magicLinks.id, id));\n  }\n\n  // Admin Sessions\n  async createAdminSession(insertAdminSession: InsertAdminSession): Promise<AdminSession> {\n    const [adminSession] = await db.insert(adminSessions).values([insertAdminSession]).returning();\n    return adminSession;\n  }\n\n  async getValidAdminSession(token: string): Promise<AdminSession | undefined> {\n    const [adminSession] = await db.select().from(adminSessions).where(\n      eq(adminSessions.token, token)\n    );\n    \n    if (!adminSession || adminSession.expiresAt < new Date()) {\n      return undefined;\n    }\n    \n    return adminSession;\n  }\n\n  async deleteAdminSession(token: string): Promise<void> {\n    await db.delete(adminSessions).where(eq(adminSessions.token, token));\n  }\n\n  // Audit Log\n  async createAuditLog(insertAuditLog: InsertAuditLog): Promise<AuditLog> {\n    const [auditLogEntry] = await db.insert(auditLog).values([insertAuditLog]).returning();\n    return auditLogEntry;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9435},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull().unique(),\n  email: text(\"email\"),\n  role: text(\"role\", { enum: [\"client\", \"admin\", \"operator\"] }).notNull().default(\"client\"),\n  language: text(\"language\", { enum: [\"es\", \"pt\"] }).notNull().default(\"es\"),\n  isGuest: boolean(\"is_guest\").default(true).notNull(),\n  preferences: jsonb(\"preferences\").$type<{favoriteServices?: string[]; preferredTime?: string; notifications?: boolean}>(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Vehicles table\nexport const vehicles = pgTable(\"vehicles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  plate: text(\"plate\").notNull(),\n  type: text(\"type\", { enum: [\"auto\", \"suv\", \"camioneta\"] }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Services table\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  slug: text(\"slug\").notNull().unique(),\n  nameKey: text(\"name_key\").notNull().unique(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  titleEs: text(\"title_es\").notNull(),\n  titlePt: text(\"title_pt\").notNull(),\n  subtitleEs: text(\"subtitle_es\").notNull(),\n  subtitlePt: text(\"subtitle_pt\").notNull(),\n  copyEs: text(\"copy_es\").notNull(),\n  copyPt: text(\"copy_pt\").notNull(),\n  prices: jsonb(\"prices\").notNull().$type<{auto?: number; suv?: number; camioneta?: number}>(),\n  durationMin: integer(\"duration_min\"),\n  imageUrl: text(\"image_url\"),\n  active: boolean(\"active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Bookings table\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  vehicleId: varchar(\"vehicle_id\").notNull().references(() => vehicles.id),\n  serviceId: varchar(\"service_id\").notNull().references(() => services.id),\n  date: text(\"date\").notNull(),\n  timeSlot: text(\"time_slot\").notNull(),\n  status: text(\"status\", { enum: [\"waiting\", \"washing\", \"done\", \"cancelled\"] }).notNull().default(\"waiting\"),\n  price: integer(\"price\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Payments table\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookingId: varchar(\"booking_id\").notNull().references(() => bookings.id),\n  method: text(\"method\", { enum: [\"card\", \"pix\", \"cash\"] }).notNull(),\n  amountGs: integer(\"amount_gs\").notNull(),\n  status: text(\"status\", { enum: [\"pending\", \"paid\", \"failed\"] }).notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Organization settings table\nexport const organization = pgTable(\"organization\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  openingHours: jsonb(\"opening_hours\"),\n  address: text(\"address\"),\n  whatsapp: text(\"whatsapp\"),\n  gallery: jsonb(\"gallery\").$type<string[]>(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// OTP tokens table for passwordless authentication\nexport const otpTokens = pgTable(\"otp_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phone: text(\"phone\").notNull(),\n  code: text(\"code\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  verified: boolean(\"verified\").default(false).notNull(),\n  attempts: integer(\"attempts\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Magic links table for booking management\nexport const magicLinks = pgTable(\"magic_links\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  token: text(\"token\").notNull().unique(),\n  bookingId: varchar(\"booking_id\").notNull().references(() => bookings.id),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  usedAt: timestamp(\"used_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Admin sessions table\nexport const adminSessions = pgTable(\"admin_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  lastActivity: timestamp(\"last_activity\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Audit log table\nexport const auditLog = pgTable(\"audit_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  actorUserId: varchar(\"actor_user_id\").references(() => users.id),\n  action: text(\"action\").notNull(),\n  targetRef: text(\"target_ref\"),\n  metadata: jsonb(\"metadata\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  vehicles: many(vehicles),\n  bookings: many(bookings),\n  adminSessions: many(adminSessions),\n}));\n\nexport const otpTokensRelations = relations(otpTokens, ({ }) => ({}));\n\nexport const magicLinksRelations = relations(magicLinks, ({ one }) => ({\n  booking: one(bookings, {\n    fields: [magicLinks.bookingId],\n    references: [bookings.id],\n  }),\n}));\n\nexport const adminSessionsRelations = relations(adminSessions, ({ one }) => ({\n  user: one(users, {\n    fields: [adminSessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const vehiclesRelations = relations(vehicles, ({ one, many }) => ({\n  user: one(users, {\n    fields: [vehicles.userId],\n    references: [users.id],\n  }),\n  bookings: many(bookings),\n}));\n\nexport const servicesRelations = relations(services, ({ many }) => ({\n  bookings: many(bookings),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  user: one(users, {\n    fields: [bookings.userId],\n    references: [users.id],\n  }),\n  vehicle: one(vehicles, {\n    fields: [bookings.vehicleId],\n    references: [vehicles.id],\n  }),\n  service: one(services, {\n    fields: [bookings.serviceId],\n    references: [services.id],\n  }),\n  payment: one(payments, {\n    fields: [bookings.id],\n    references: [payments.bookingId],\n  }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  booking: one(bookings, {\n    fields: [payments.bookingId],\n    references: [bookings.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVehicleSchema = createInsertSchema(vehicles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrganizationSchema = createInsertSchema(organization).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertOtpTokenSchema = createInsertSchema(otpTokens).omit({\n  id: true,\n  verified: true,\n  attempts: true,\n  createdAt: true,\n});\n\nexport const insertMagicLinkSchema = createInsertSchema(magicLinks).omit({\n  id: true,\n  usedAt: true,\n  createdAt: true,\n});\n\nexport const insertAdminSessionSchema = createInsertSchema(adminSessions).omit({\n  id: true,\n  lastActivity: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\nexport type Vehicle = typeof vehicles.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\nexport type Organization = typeof organization.$inferSelect;\nexport type InsertOtpToken = z.infer<typeof insertOtpTokenSchema>;\nexport type OtpToken = typeof otpTokens.$inferSelect;\nexport type InsertMagicLink = z.infer<typeof insertMagicLinkSchema>;\nexport type MagicLink = typeof magicLinks.$inferSelect;\nexport type InsertAdminSession = z.infer<typeof insertAdminSessionSchema>;\nexport type AdminSession = typeof adminSessions.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLog.$inferSelect;\n","size_bytes":9269},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\n\n// Main App Components\nimport Home from \"@/components/Home\";\nimport ClienteApp from \"@/components/ClienteApp\";\nimport AdminApp from \"@/components/AdminApp\";\nimport TestServices from \"@/pages/TestServices\";\n\n// Wrapper components for routing\nfunction HomePage() {\n  return <Home language=\"es\" />;\n}\n\nfunction ClientePage() {\n  return <ClienteApp language=\"es\" />;\n}\n\nfunction AdminPage() {\n  return <AdminApp language=\"es\" />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/cliente\" component={ClientePage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/test-services\" component={TestServices} />\n      <Route component={HomePage} /> {/* Fallback to home */}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1286},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* MILOS'SHOP THEME */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 0%;\n\n  --foreground: 0 0% 100%;\n\n  --border: 0 0% 15%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 0 0% 7%;\n\n  --card-border: 220 10% 92%;\n\n  --sidebar: 220 10% 96%;\n\n  --sidebar-foreground: 220 15% 15%;\n\n  --sidebar-border: 220 10% 90%;\n\n  --sidebar-primary: 0 100% 44%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 12% 88%;\n\n  --sidebar-accent-foreground: 220 15% 25%;\n\n  --sidebar-ring: 0 100% 44%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 15% 15%;\n\n  --popover-border: 220 10% 90%;\n\n  --primary: 0 100% 44%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 8% 92%;\n\n  --secondary-foreground: 220 15% 25%;\n\n  --muted: 220 8% 94%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 220 12% 95%;\n\n  --accent-foreground: 220 15% 25%;\n\n  --destructive: 0 100% 44%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 12% 82%;\n  --ring: 215 85% 35%;\n  --chart-1: 215 85% 35%;\n  --chart-2: 145 70% 45%;\n  --chart-3: 35 90% 55%;\n  --chart-4: 280 65% 55%;\n  --chart-5: 195 75% 50%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .75rem; /* 12px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 10% 50% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 10% 50% / 0.10);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 10% 50% / 0.06), 0px 1px 3px 0px hsl(220 10% 50% / 0.10);\n  --shadow: 0px 1px 3px 0px hsl(220 10% 50% / 0.10), 0px 1px 2px 0px hsl(220 10% 50% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(220 10% 50% / 0.10), 0px 2px 4px -1px hsl(220 10% 50% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 10% 50% / 0.10), 0px 4px 6px -2px hsl(220 10% 50% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 10% 50% / 0.10), 0px 10px 10px -5px hsl(220 10% 50% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 10% 50% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 15% 18%;\n\n  --card: 220 15% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 15% 20%;\n\n  --sidebar: 220 15% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 15% 16%;\n\n  --sidebar-primary: 0 100% 44%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 15% 16%;\n\n  --sidebar-accent-foreground: 220 10% 70%;\n\n  --sidebar-ring: 0 100% 44%;\n\n  --popover: 220 15% 12%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 15% 20%;\n\n  --primary: 0 100% 44%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 15% 18%;\n\n  --secondary-foreground: 220 10% 70%;\n\n  --muted: 220 15% 14%;\n\n  --muted-foreground: 220 10% 70%;\n\n  --accent: 220 15% 16%;\n\n  --accent-foreground: 220 10% 70%;\n\n  --destructive: 0 100% 44%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 22%;\n  --ring: 215 85% 35%;\n  --chart-1: 215 85% 60%;\n  --chart-2: 145 70% 65%;\n  --chart-3: 35 90% 70%;\n  --chart-4: 280 65% 70%;\n  --chart-5: 195 75% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.20), 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.25), 0px 4px 6px -2px hsl(0 0% 0% / 0.15);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.25), 0px 10px 10px -5px hsl(0 0% 0% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n\n","size_bytes":9797},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminApp.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport Header from \"./Header\";\nimport AdminDashboard from \"./AdminDashboard\";\n\ninterface AdminAppProps {\n  language?: 'es' | 'pt';\n}\n\nexport default function AdminApp({ language = 'es' }: AdminAppProps) {\n  const [currentLanguage, setCurrentLanguage] = useState<'es' | 'pt'>(language);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { joinAdminRoom, disconnect } = useWebSocket();\n\n  // Initialize WebSocket connection for real-time updates\n  useEffect(() => {\n    console.log('AdminApp mounted - connecting to WebSocket...');\n    joinAdminRoom();\n    \n    return () => {\n      console.log('AdminApp unmounting - disconnecting WebSocket...');\n      disconnect();\n    };\n  }, [joinAdminRoom, disconnect]);\n\n  // Fetch today's bookings from backend\n  const { data: bookings = [], isLoading, error } = useQuery({\n    queryKey: ['/api/bookings/today'],\n    select: (data: any[]) => data.map((booking: any) => ({\n      ...booking,\n      // Use the flat fields returned by API (from joins)\n      serviceName: booking.serviceName || 'Servicio desconocido',\n      vehiclePlate: booking.vehiclePlate || 'Placa desconocida'\n    }))\n  });\n\n  // Calculate stats based on real data\n  const stats = {\n    todayBookings: bookings.length,\n    activeWashing: bookings.filter((b: any) => b.status === 'washing').length,\n    completedToday: bookings.filter((b: any) => b.status === 'done').length,\n    todayRevenue: bookings\n      .filter((b: any) => b.status === 'done')\n      .reduce((sum: number, b: any) => sum + (b.price || 0), 0),\n    avgServiceTime: 28 // TODO: Calculate based on actual service times\n  };\n\n  // Mutation to update booking status\n  const statusUpdateMutation = useMutation({\n    mutationFn: async ({ bookingId, newStatus }: { bookingId: string; newStatus: string }) => {\n      const response = await fetch(`/api/bookings/${bookingId}/status`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ status: newStatus })\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Error updating status');\n      }\n      \n      return data;\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings/today'] });\n      const statusText = variables.newStatus === 'washing' ? 'en lavado' : \n                        variables.newStatus === 'done' ? 'finalizado' : \n                        variables.newStatus === 'cancelled' ? 'cancelado' : variables.newStatus;\n      \n      toast({\n        title: \"‚úÖ Acci√≥n realizada con √©xito\",\n        description: `Estado actualizado a: ${statusText}`,\n      });\n    },\n    onError: (error: any) => {\n      if (error.message.includes('Price mismatch') || error.message.includes('price')) {\n        toast({\n          title: \"‚ö†Ô∏è Error de precio\",\n          description: \"El precio no coincide con la base de datos. Actualiza la tarifa del servicio y vuelve a intentar.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"‚ùå Ocurri√≥ un error. Intenta nuevamente.\",\n          description: error.message || \"No se pudo actualizar el estado de la reserva\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  });\n\n  const handleStatusUpdate = (bookingId: string, newStatus: string) => {\n    statusUpdateMutation.mutate({ bookingId, newStatus });\n  };\n\n  const handleViewDetails = (bookingId: string) => {\n    const booking = bookings.find((b: any) => b.id === bookingId);\n    if (booking) {\n      // Show booking details in alert for now - can be replaced with modal later\n      const details = [\n        `ID: ${booking.id}`,\n        `Servicio: ${booking.serviceName}`,\n        `Veh√≠culo: ${booking.vehiclePlate}`,\n        `Fecha: ${booking.date}`,\n        `Hora: ${booking.timeSlot}`,\n        `Precio: ${new Intl.NumberFormat('es-PY', { style: 'currency', currency: 'PYG', minimumFractionDigits: 0 }).format(booking.price)}`,\n        `M√©todo de pago: ${booking.paymentMethod || 'No definido'}`,\n        `Estado del pago: ${booking.paymentStatus || 'No definido'}`\n      ].join('\\n');\n      alert(details);\n    }\n  };\n\n  const handleRefresh = () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/bookings/today'] });\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">Error al cargar datos</h2>\n          <p className=\"text-muted-foreground\">No se pudieron cargar las reservas del d√≠a</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        currentLanguage={currentLanguage}\n        onLanguageChange={setCurrentLanguage}\n      />\n      \n      <AdminDashboard\n        stats={stats}\n        todayBookings={bookings}\n        onStatusUpdate={handleStatusUpdate}\n        onViewDetails={handleViewDetails}\n        onRefresh={handleRefresh}\n        isLoading={isLoading}\n      />\n    </div>\n  );\n}","size_bytes":5441},"client/src/components/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport BookingCard from \"./BookingCard\";\nimport BookingsTable from \"./BookingsTable\";\nimport MiniAnalytics from \"./MiniAnalytics\";\nimport StatusBadge from \"./StatusBadge\";\nimport { CalendarDays, Car, DollarSign, Clock, TrendingUp, List, Eye, History, FileText } from \"lucide-react\";\n\ninterface DashboardStats {\n  todayBookings: number;\n  activeWashing: number;\n  completedToday: number;\n  todayRevenue: number;\n  avgServiceTime: number;\n}\n\ninterface AdminDashboardProps {\n  stats: DashboardStats;\n  todayBookings: any[];\n  onStatusUpdate: (bookingId: string, newStatus: string) => void;\n  onViewDetails: (bookingId: string) => void;\n  onRefresh?: () => void;\n  isLoading?: boolean;\n}\n\nexport default function AdminDashboard({ \n  stats, \n  todayBookings, \n  onStatusUpdate, \n  onViewDetails,\n  onRefresh,\n  isLoading = false\n}: AdminDashboardProps) {\n  const [currentView, setCurrentView] = useState<'dashboard' | 'bookings-list' | 'washing-detail' | 'completed-history' | 'revenue-detail'>('dashboard');\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-PY', {\n      style: 'currency',\n      currency: 'PYG',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const statCards = [\n    {\n      title: \"Agendamientos de hoy\",\n      value: stats.todayBookings,\n      icon: CalendarDays,\n      description: \"Total programados\",\n      color: \"text-blue-600\",\n      actionButton: {\n        text: \"Ver lista\",\n        icon: List,\n        onClick: () => setCurrentView('bookings-list')\n      }\n    },\n    {\n      title: \"En lavado\",\n      value: stats.activeWashing,\n      icon: Car,\n      description: \"Actualmente lavando\",\n      color: \"text-orange-600\",\n      actionButton: {\n        text: \"Ver detalle\",\n        icon: Eye,\n        onClick: () => setCurrentView('washing-detail')\n      }\n    },\n    {\n      title: \"Finalizados hoy\",\n      value: stats.completedToday,\n      icon: Clock,\n      description: \"Servicios completados\",\n      color: \"text-green-600\",\n      actionButton: {\n        text: \"Historial del d√≠a\",\n        icon: History,\n        onClick: () => setCurrentView('completed-history')\n      }\n    },\n    {\n      title: \"Ingresos del d√≠a\",\n      value: formatCurrency(stats.todayRevenue),\n      icon: DollarSign,\n      description: \"Facturaci√≥n diaria\",\n      color: \"text-primary\",\n      actionButton: {\n        text: \"Ver detalles\",\n        icon: FileText,\n        onClick: () => setCurrentView('revenue-detail')\n      }\n    }\n  ];\n\n  const filterBookings = (status: string) => {\n    return todayBookings.filter(booking => booking.status === status);\n  };\n\n  // Show specific views based on currentView state\n  if (currentView === 'bookings-list') {\n    return (\n      <div className=\"space-y-6 p-6\">\n        <BookingsTable\n          bookings={todayBookings}\n          title=\"Lista de Agendamientos de Hoy\"\n          onStatusUpdate={onStatusUpdate}\n          onViewDetails={onViewDetails}\n          onBack={() => setCurrentView('dashboard')}\n        />\n      </div>\n    );\n  }\n\n  if (currentView === 'washing-detail') {\n    return (\n      <div className=\"space-y-6 p-6\">\n        <BookingsTable\n          bookings={todayBookings}\n          title=\"Veh√≠culos en Lavado\"\n          onStatusUpdate={onStatusUpdate}\n          onViewDetails={onViewDetails}\n          onBack={() => setCurrentView('dashboard')}\n          filterStatus=\"washing\"\n        />\n      </div>\n    );\n  }\n\n  if (currentView === 'completed-history') {\n    return (\n      <div className=\"space-y-6 p-6\">\n        <BookingsTable\n          bookings={todayBookings}\n          title=\"Historial del D√≠a - Servicios Completados\"\n          onStatusUpdate={onStatusUpdate}\n          onViewDetails={onViewDetails}\n          onBack={() => setCurrentView('dashboard')}\n          filterStatus=\"done\"\n        />\n      </div>\n    );\n  }\n\n  if (currentView === 'revenue-detail') {\n    const completedBookings = filterBookings('done');\n    const revenueByService = completedBookings.reduce((acc, booking) => {\n      const serviceName = booking.serviceName;\n      if (!acc[serviceName]) {\n        acc[serviceName] = { count: 0, total: 0 };\n      }\n      acc[serviceName].count++;\n      acc[serviceName].total += booking.price;\n      return acc;\n    }, {} as Record<string, { count: number; total: number }>);\n\n    const revenueByPaymentMethod = completedBookings.reduce((acc, booking) => {\n      const method = booking.paymentMethod || 'cash';\n      if (!acc[method]) {\n        acc[method] = 0;\n      }\n      acc[method] += booking.price;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return (\n      <div className=\"space-y-6 p-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setCurrentView('dashboard')}\n                data-testid=\"button-back-to-dashboard\"\n              >\n                <List className=\"h-4 w-4\" />\n              </Button>\n              <CardTitle>Detalles de Ingresos del D√≠a</CardTitle>\n            </div>\n            <CardDescription>\n              Desglose completo por servicio y m√©todo de pago\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Revenue by Service */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-3\">Ingresos por Servicio</h3>\n              <div className=\"space-y-2\">\n                {Object.entries(revenueByService).map(([service, data]: [string, { count: number; total: number }]) => (\n                  <div key={service} className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                    <div>\n                      <span className=\"font-medium\">{service}</span>\n                      <span className=\"text-sm text-muted-foreground ml-2\">({data.count} servicios)</span>\n                    </div>\n                    <span className=\"font-bold text-green-600\">{formatCurrency(data.total)}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Revenue by Payment Method */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-3\">Ingresos por M√©todo de Pago</h3>\n              <div className=\"space-y-2\">\n                {Object.entries(revenueByPaymentMethod).map(([method, total]: [string, number]) => (\n                  <div key={method} className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                    <span className=\"font-medium\">\n                      {method === 'card' ? 'Tarjeta' : method === 'pix' ? 'PIX' : 'Efectivo'}\n                    </span>\n                    <span className=\"font-bold text-primary\">{formatCurrency(total)}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Total Summary */}\n            <div className=\"pt-4 border-t\">\n              <div className=\"flex justify-between items-center text-lg font-bold\">\n                <span>Total del D√≠a:</span>\n                <span className=\"text-primary\">{formatCurrency(stats.todayRevenue)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Gesti√≥n r√°pida de tus reservas y servicios de hoy\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            {new Date().toLocaleDateString('es-ES')}\n          </p>\n        </div>\n        <Button \n          variant=\"outline\" \n          data-testid=\"button-refresh-dashboard\"\n          onClick={onRefresh}\n          disabled={isLoading}\n        >\n          <TrendingUp className=\"h-4 w-4 mr-2\" />\n          {isLoading ? 'Actualizando...' : 'Actualizar'}\n        </Button>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {statCards.map((stat, index) => {\n          const IconComponent = stat.icon;\n          const ActionIcon = stat.actionButton.icon;\n          return (\n            <Card key={index} data-testid={`card-stat-${index}`}>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">{stat.title}</CardTitle>\n                <IconComponent className={`h-4 w-4 ${stat.color}`} />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stat.value}</div>\n                <p className=\"text-xs text-muted-foreground mb-3\">{stat.description}</p>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={stat.actionButton.onClick}\n                  className=\"w-full\"\n                  data-testid={`button-${stat.actionButton.text.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <ActionIcon className=\"h-3 w-3 mr-1\" />\n                  {stat.actionButton.text}\n                </Button>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Mini Analytics */}\n      <MiniAnalytics bookings={todayBookings} />\n\n      {/* Bookings Management */}\n      <Tabs defaultValue=\"all\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"all\" data-testid=\"tab-all-bookings\">\n            Todos ({todayBookings.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"waiting\" data-testid=\"tab-waiting-bookings\">\n            En espera ({filterBookings('waiting').length})\n          </TabsTrigger>\n          <TabsTrigger value=\"washing\" data-testid=\"tab-washing-bookings\">\n            Lavando ({filterBookings('washing').length})\n          </TabsTrigger>\n          <TabsTrigger value=\"done\" data-testid=\"tab-done-bookings\">\n            Finalizados ({filterBookings('done').length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {todayBookings.map((booking) => (\n              <BookingCard\n                key={booking.id}\n                {...booking}\n                onStatusUpdate={onStatusUpdate}\n                onViewDetails={onViewDetails}\n                isAdmin={true}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"waiting\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filterBookings('waiting').map((booking) => (\n              <BookingCard\n                key={booking.id}\n                {...booking}\n                onStatusUpdate={onStatusUpdate}\n                onViewDetails={onViewDetails}\n                isAdmin={true}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"washing\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filterBookings('washing').map((booking) => (\n              <BookingCard\n                key={booking.id}\n                {...booking}\n                onStatusUpdate={onStatusUpdate}\n                onViewDetails={onViewDetails}\n                isAdmin={true}\n              />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"done\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filterBookings('done').map((booking) => (\n              <BookingCard\n                key={booking.id}\n                {...booking}\n                onStatusUpdate={onStatusUpdate}\n                onViewDetails={onViewDetails}\n                isAdmin={true}\n              />\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":12393},"client/src/components/BookingCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport StatusBadge from \"./StatusBadge\";\nimport { Car, Calendar, Clock, CreditCard } from \"lucide-react\";\n\ninterface BookingCardProps {\n  id: string;\n  serviceName: string;\n  vehiclePlate: string;\n  date: string;\n  timeSlot: string;\n  status: 'waiting' | 'washing' | 'done' | 'cancelled';\n  price: number;\n  paymentMethod?: 'card' | 'pix' | 'cash';\n  paymentStatus?: 'pending' | 'paid' | 'failed';\n  onStatusUpdate?: (bookingId: string, newStatus: string) => void;\n  onViewDetails?: (bookingId: string) => void;\n  isAdmin?: boolean;\n}\n\nexport default function BookingCard({ \n  id,\n  serviceName,\n  vehiclePlate,\n  date,\n  timeSlot,\n  status,\n  price,\n  paymentMethod,\n  paymentStatus,\n  onStatusUpdate,\n  onViewDetails,\n  isAdmin = false\n}: BookingCardProps) {\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('es-PY', {\n      style: 'currency',\n      currency: 'PYG',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const getPaymentMethodText = (method?: string) => {\n    switch (method) {\n      case 'card': return 'Tarjeta';\n      case 'pix': return 'PIX';\n      case 'cash': return 'Efectivo';\n      default: return 'No definido';\n    }\n  };\n\n  const getPaymentStatusColor = (status?: string) => {\n    switch (status) {\n      case 'paid': return 'text-green-600';\n      case 'failed': return 'text-red-600';\n      default: return 'text-yellow-600';\n    }\n  };\n\n  return (\n    <Card className=\"w-full hover-elevate\" data-testid={`card-booking-${id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-foreground\">\n            {serviceName}\n          </CardTitle>\n          <StatusBadge status={status} />\n        </div>\n        \n        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <Car className=\"h-4 w-4\" />\n            <span className=\"font-medium\">{vehiclePlate}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>{date}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"h-4 w-4\" />\n            <span>{timeSlot}</span>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-sm\">\n              {getPaymentMethodText(paymentMethod)}\n            </span>\n            {paymentStatus && (\n              <Badge \n                variant=\"outline\" \n                className={`text-xs ${getPaymentStatusColor(paymentStatus)}`}\n              >\n                {paymentStatus === 'paid' ? 'Pagado' : \n                 paymentStatus === 'failed' ? 'Fall√≥' : 'Pendiente'}\n              </Badge>\n            )}\n          </div>\n          <span className=\"text-lg font-bold text-primary\">\n            {formatPrice(price)}\n          </span>\n        </div>\n      </CardContent>\n      \n      <CardFooter className=\"flex gap-2\">\n        {isAdmin && onStatusUpdate && status !== 'done' && status !== 'cancelled' && (\n          <Button \n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              const nextStatus = status === 'waiting' ? 'washing' : 'done';\n              onStatusUpdate(id, nextStatus);\n            }}\n            data-testid={`button-update-status-${id}`}\n          >\n            {status === 'waiting' ? 'Iniciar lavado' : 'Finalizar'}\n          </Button>\n        )}\n        \n        {onViewDetails && (\n          <Button \n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onViewDetails(id)}\n            data-testid={`button-view-details-${id}`}\n          >\n            Ver detalles\n          </Button>\n        )}\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":4247},"client/src/components/BookingFlow.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar, Clock, Car, CreditCard, Phone, User, ArrowLeft } from \"lucide-react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Service, Vehicle, InsertBooking, InsertUser, InsertVehicle } from \"@shared/schema\";\n\ninterface BookingFlowProps {\n  service: Service;\n  selectedVehicleType: 'auto' | 'suv' | 'camioneta';\n  onBack: () => void;\n  language: 'es' | 'pt';\n}\n\nexport default function BookingFlow({ service, selectedVehicleType, onBack, language }: BookingFlowProps) {\n  const [step, setStep] = useState<'user' | 'vehicle' | 'booking' | 'payment'>('user');\n  const [userId, setUserId] = useState<string>('');\n  const [vehicleId, setVehicleId] = useState<string>('');\n  const [bookingData, setBookingData] = useState({\n    date: '',\n    timeSlot: '',\n    notes: ''\n  });\n  const [userForm, setUserForm] = useState({\n    name: '',\n    phone: '',\n    email: '',\n    language: language\n  });\n  const [vehicleForm, setVehicleForm] = useState({\n    plate: '',\n    type: selectedVehicleType\n  });\n  \n  const { toast } = useToast();\n\n  const content = {\n    es: {\n      title: \"Reservar Servicio\",\n      userInfo: \"Informaci√≥n Personal\",\n      vehicleInfo: \"Informaci√≥n del Veh√≠culo\", \n      bookingDetails: \"Detalles de la Reserva\",\n      payment: \"Pago\",\n      name: \"Nombre completo\",\n      phone: \"Tel√©fono\",\n      email: \"Email (opcional)\",\n      plate: \"Placa del veh√≠culo\",\n      vehicleType: \"Tipo de veh√≠culo\",\n      date: \"Fecha\",\n      time: \"Hora\",\n      notes: \"Notas adicionales (opcional)\",\n      total: \"Total\",\n      back: \"Volver\",\n      continue: \"Continuar\",\n      confirm: \"Confirmar Reserva\",\n      auto: \"Auto\",\n      suv: \"SUV\", \n      camioneta: \"Camioneta\",\n      bookingSuccess: \"¬°Reserva creada exitosamente!\",\n      bookingError: \"Error al crear la reserva\"\n    },\n    pt: {\n      title: \"Reservar Servi√ßo\",\n      userInfo: \"Informa√ß√µes Pessoais\",\n      vehicleInfo: \"Informa√ß√µes do Ve√≠culo\",\n      bookingDetails: \"Detalhes da Reserva\", \n      payment: \"Pagamento\",\n      name: \"Nome completo\",\n      phone: \"Telefone\",\n      email: \"Email (opcional)\",\n      plate: \"Placa do ve√≠culo\",\n      vehicleType: \"Tipo de ve√≠culo\",\n      date: \"Data\",\n      time: \"Hora\",\n      notes: \"Notas adicionais (opcional)\",\n      total: \"Total\",\n      back: \"Voltar\",\n      continue: \"Continuar\",\n      confirm: \"Confirmar Reserva\",\n      auto: \"Auto\",\n      suv: \"SUV\",\n      camioneta: \"Caminhonete\",\n      bookingSuccess: \"Reserva criada com sucesso!\",\n      bookingError: \"Erro ao criar reserva\"\n    }\n  };\n\n  const t = content[language];\n  const servicePrice = service.prices[selectedVehicleType] || 0;\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('es-PY', {\n      style: 'currency',\n      currency: 'PYG',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  // Create or get user\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: InsertUser) => {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw { status: response.status, message: error.error };\n      }\n      return response.json();\n    },\n    onSuccess: (user) => {\n      setUserId(user.id);\n      setStep('vehicle');\n    },\n    onError: (error: any) => {\n      if (error.status === 409) {\n        // User exists, could implement login flow here\n        toast({\n          title: t.bookingError,\n          description: \"Usuario ya existe. Funcionalidad de login pr√≥ximamente.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: t.bookingError,\n          description: error.message || \"Error desconocido\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  });\n\n  // Create vehicle\n  const createVehicleMutation = useMutation({\n    mutationFn: async (vehicleData: InsertVehicle) => {\n      const response = await fetch('/api/vehicles', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(vehicleData)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw { status: response.status, message: error.error };\n      }\n      return response.json();\n    },\n    onSuccess: (vehicle) => {\n      setVehicleId(vehicle.id);\n      setStep('booking');\n    },\n    onError: (error: any) => {\n      toast({\n        title: t.bookingError,\n        description: error.message || \"Error al registrar veh√≠culo\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Create booking\n  const createBookingMutation = useMutation({\n    mutationFn: async (booking: InsertBooking) => {\n      const response = await fetch('/api/bookings', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(booking)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw { status: response.status, message: error.error };\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t.bookingSuccess,\n        description: `Reserva para ${service.title} confirmada`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      onBack(); // Return to services list\n    },\n    onError: (error: any) => {\n      toast({\n        title: t.bookingError,\n        description: error.message || \"Error al crear reserva\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleUserSubmit = () => {\n    if (!userForm.name || !userForm.phone) {\n      toast({\n        title: \"Error\",\n        description: \"Nombre y tel√©fono son requeridos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createUserMutation.mutate({\n      name: userForm.name,\n      phone: userForm.phone,\n      email: userForm.email || undefined,\n      language: language,\n      role: 'client'\n    });\n  };\n\n  const handleVehicleSubmit = () => {\n    if (!vehicleForm.plate) {\n      toast({\n        title: \"Error\", \n        description: \"Placa del veh√≠culo es requerida\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createVehicleMutation.mutate({\n      userId,\n      plate: vehicleForm.plate,\n      type: vehicleForm.type as 'auto' | 'suv' | 'camioneta'\n    });\n  };\n\n  const handleBookingSubmit = () => {\n    if (!bookingData.date || !bookingData.timeSlot) {\n      toast({\n        title: \"Error\",\n        description: \"Fecha y hora son requeridas\", \n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createBookingMutation.mutate({\n      userId,\n      vehicleId,\n      serviceId: service.id,\n      date: bookingData.date,\n      timeSlot: bookingData.timeSlot,\n      price: servicePrice,\n      notes: bookingData.notes || undefined\n    });\n  };\n\n  const generateTimeSlots = () => {\n    const slots = [];\n    for (let hour = 8; hour <= 18; hour++) {\n      slots.push(`${hour.toString().padStart(2, '0')}:00`);\n      if (hour < 18) {\n        slots.push(`${hour.toString().padStart(2, '0')}:30`);\n      }\n    }\n    return slots;\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={onBack} data-testid=\"button-back\">\n          <ArrowLeft className=\"h-4 w-4\" />\n        </Button>\n        <div>\n          <h1 className=\"text-2xl font-bold\">{t.title}</h1>\n          <p className=\"text-muted-foreground\">{service.title}</p>\n        </div>\n      </div>\n\n      {/* Service Summary */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"font-semibold\">{service.title}</h3>\n              <p className=\"text-sm text-muted-foreground capitalize\">{selectedVehicleType}</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-primary\">{formatPrice(servicePrice)}</div>\n              {service.durationMin && (\n                <div className=\"text-sm text-muted-foreground\">{service.durationMin} min</div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Step Content */}\n      {step === 'user' && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              {t.userInfo}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">{t.name}</Label>\n              <Input\n                id=\"name\"\n                value={userForm.name}\n                onChange={(e) => setUserForm({...userForm, name: e.target.value})}\n                data-testid=\"input-name\"\n                className=\"bg-white text-black\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"phone\">{t.phone}</Label>\n              <Input\n                id=\"phone\"\n                value={userForm.phone}\n                onChange={(e) => setUserForm({...userForm, phone: e.target.value})}\n                data-testid=\"input-phone\"\n                className=\"bg-white text-black\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"email\">{t.email}</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={userForm.email}\n                onChange={(e) => setUserForm({...userForm, email: e.target.value})}\n                data-testid=\"input-email\"\n                className=\"bg-white text-black\"\n              />\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button \n              onClick={handleUserSubmit} \n              size=\"sm\"\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 mx-auto\"\n              disabled={createUserMutation.isPending}\n              data-testid=\"button-continue-user\"\n            >\n              {createUserMutation.isPending ? \"...\" : t.continue}\n            </Button>\n          </CardFooter>\n        </Card>\n      )}\n\n      {step === 'vehicle' && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Car className=\"h-5 w-5\" />\n              {t.vehicleInfo}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"plate\">{t.plate}</Label>\n              <Input\n                id=\"plate\"\n                value={vehicleForm.plate}\n                onChange={(e) => setVehicleForm({...vehicleForm, plate: e.target.value.toUpperCase()})}\n                placeholder=\"ABC-123\"\n                data-testid=\"input-plate\"\n                className=\"bg-white text-black\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"vehicleType\">{t.vehicleType}</Label>\n              <Select value={vehicleForm.type} onValueChange={(value: 'auto' | 'suv' | 'camioneta') => setVehicleForm({...vehicleForm, type: value})}>\n                <SelectTrigger className=\"bg-white text-gray-900\" data-testid=\"select-vehicle-type-booking\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"auto\">{t.auto}</SelectItem>\n                  <SelectItem value=\"suv\">{t.suv}</SelectItem>\n                  <SelectItem value=\"camioneta\">{t.camioneta}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={() => setStep('user')} data-testid=\"button-back-vehicle\">\n              {t.back}\n            </Button>\n            <Button \n              onClick={handleVehicleSubmit} \n              size=\"sm\"\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2\"\n              disabled={createVehicleMutation.isPending}\n              data-testid=\"button-continue-vehicle\"\n            >\n              {createVehicleMutation.isPending ? \"...\" : t.continue}\n            </Button>\n          </CardFooter>\n        </Card>\n      )}\n\n      {step === 'booking' && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              {t.bookingDetails}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"date\">{t.date}</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                value={bookingData.date}\n                onChange={(e) => setBookingData({...bookingData, date: e.target.value})}\n                min={new Date().toISOString().split('T')[0]}\n                data-testid=\"input-date\"\n                className=\"bg-white text-black\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"timeSlot\">{t.time}</Label>\n              <Select value={bookingData.timeSlot} onValueChange={(value) => setBookingData({...bookingData, timeSlot: value})}>\n                <SelectTrigger className=\"bg-white text-gray-900\" data-testid=\"select-time-slot\">\n                  <SelectValue placeholder=\"Selecciona una hora\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {generateTimeSlots().map((slot) => (\n                    <SelectItem key={slot} value={slot}>{slot}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"notes\">{t.notes}</Label>\n              <Textarea\n                id=\"notes\"\n                value={bookingData.notes}\n                onChange={(e) => setBookingData({...bookingData, notes: e.target.value})}\n                placeholder=\"Instrucciones especiales...\"\n                data-testid=\"textarea-notes\"\n                className=\"bg-white text-black\"\n              />\n            </div>\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-semibold\">{t.total}:</span>\n                <span className=\"text-2xl font-bold text-primary\">{formatPrice(servicePrice)}</span>\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={() => setStep('vehicle')} data-testid=\"button-back-booking\">\n              {t.back}\n            </Button>\n            <Button \n              onClick={handleBookingSubmit} \n              size=\"sm\"\n              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2\"\n              disabled={createBookingMutation.isPending}\n              data-testid=\"button-confirm-booking\"\n            >\n              {createBookingMutation.isPending ? \"...\" : t.confirm}\n            </Button>\n          </CardFooter>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":15900},"client/src/components/ClienteApp.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport Header from \"./Header\";\nimport NewServiceCard from \"./NewServiceCard\";\nimport BookingCard from \"./BookingCard\";\nimport BookingFlow from \"./BookingFlow\";\nimport VehicleSelector from \"./VehicleSelector\";\nimport { ShoppingCart, User, History, Car, AlertTriangle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Service, Booking } from \"@shared/schema\";\n\ninterface ClienteAppProps {\n  language?: 'es' | 'pt';\n}\n\nexport default function ClienteApp({ language = 'es' }: ClienteAppProps) {\n  const [currentLanguage, setCurrentLanguage] = useState<'es' | 'pt'>(language);\n  const [selectedVehicleType, setSelectedVehicleType] = useState<'auto' | 'suv' | 'camioneta' | null>(null);\n  const [bookingService, setBookingService] = useState<any | null>(null);\n\n  const content = {\n    es: {\n      title: \"Milos'Shop Cliente\",\n      subtitle: \"Reserva tu servicio de lavado\",\n      services: \"Servicios\",\n      bookings: \"Mis Reservas\",\n      profile: \"Perfil\",\n      vehicleType: \"Tipo de veh√≠culo\",\n      selectVehicle: \"Selecciona tu veh√≠culo\",\n      auto: \"Auto\",\n      suv: \"SUV\",\n      camioneta: \"Camioneta\"\n    },\n    pt: {\n      title: \"Milos'Shop Cliente\",\n      subtitle: \"Reserve seu servi√ßo de lavagem\", \n      services: \"Servi√ßos\",\n      bookings: \"Minhas Reservas\",\n      profile: \"Perfil\",\n      vehicleType: \"Tipo de ve√≠culo\",\n      selectVehicle: \"Selecione seu ve√≠culo\",\n      auto: \"Auto\",\n      suv: \"SUV\",\n      camioneta: \"Caminhonete\"\n    }\n  };\n\n  const t = content[currentLanguage];\n\n  // Fetch services from API\n  const { data: services = [], isLoading: servicesLoading, error: servicesError } = useQuery<Service[]>({\n    queryKey: ['/api/services'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Fetch user bookings from API\n  const { data: userBookings = [], isLoading: bookingsLoading, error: bookingsError, refetch: refetchBookings } = useQuery<any[]>({\n    queryKey: ['/api/bookings'],\n    staleTime: 1 * 60 * 1000, // 1 minute\n  });\n\n  const handleServiceReserve = (serviceSlug: string) => {\n    const service = services.find(s => s.slug === serviceSlug);\n    if (service) {\n      setBookingService(service);\n    }\n  };\n  \n  const handleBackToServices = () => {\n    setBookingService(null);\n  };\n\n  const handleUploadImage = async (serviceSlug: string, file: File) => {\n    console.log('Upload de imagem para servi√ßo:', serviceSlug, file.name);\n    \n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n      formData.append('serviceSlug', serviceSlug);\n      \n      const response = await fetch('/api/services/upload-image', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (response.ok) {\n        const result = await response.json();\n        console.log('Imagem carregada com sucesso:', result);\n        // Refresh services to get updated data\n        // queryClient.invalidateQueries({ queryKey: ['/api/services'] });\n      } else {\n        console.error('Erro ao carregar imagem');\n        alert('Erro ao carregar imagem. Tente novamente.');\n      }\n    } catch (error) {\n      console.error('Erro ao fazer upload:', error);\n      alert('Erro ao carregar imagem. Verifique sua conex√£o.');\n    }\n  };\n\n  const handleOrderDetails = (orderId: string) => {\n    console.log('View order details:', orderId);\n  };\n\n  // Show booking flow if service is selected\n  if (bookingService) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header \n          currentLanguage={currentLanguage}\n          onLanguageChange={setCurrentLanguage}\n        />\n        \n        <div className=\"container mx-auto px-4 py-6\">\n          <BookingFlow \n            service={bookingService}\n            selectedVehicleType={selectedVehicleType || 'auto'}\n            onBack={handleBackToServices}\n            language={currentLanguage}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        currentLanguage={currentLanguage}\n        onLanguageChange={setCurrentLanguage}\n      />\n      \n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground\">{t.title}</h1>\n          <p className=\"text-muted-foreground\">{t.subtitle}</p>\n        </div>\n\n        <Tabs defaultValue=\"services\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"services\" data-testid=\"tab-services\">\n              <ShoppingCart className=\"h-4 w-4 mr-2\" />\n              {t.services}\n            </TabsTrigger>\n            <TabsTrigger value=\"bookings\" data-testid=\"tab-bookings\">\n              <History className=\"h-4 w-4 mr-2\" />\n              {t.bookings}\n            </TabsTrigger>\n            <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">\n              <User className=\"h-4 w-4 mr-2\" />\n              {t.profile}\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"services\" className=\"space-y-6\">\n            {/* Vehicle Type Selector */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Car className=\"h-5 w-5\" />\n                  {currentLanguage === 'es' ? 'Paso 1: Selecciona tu veh√≠culo' : 'Passo 1: Selecione seu ve√≠culo'}\n                </CardTitle>\n                <CardDescription>\n                  {currentLanguage === 'es' \n                    ? 'Elige el tipo de veh√≠culo para ver los precios correspondientes' \n                    : 'Escolha o tipo de ve√≠culo para ver os pre√ßos correspondentes'}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <VehicleSelector\n                  selectedType={selectedVehicleType}\n                  onSelect={setSelectedVehicleType}\n                  language={currentLanguage}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Services Grid */}\n            <div className=\"space-y-6\">\n              <div className=\"text-center space-y-2\">\n                <h2 className=\"text-2xl font-bold text-foreground\">\n                  {currentLanguage === 'es' ? 'Paso 2: Selecciona tu servicio' : 'Passo 2: Selecione seu servi√ßo'}\n                </h2>\n                <p className=\"text-gray-400\">\n                  {currentLanguage === 'es' \n                    ? 'Elige el servicio que mejor se adapte a tus necesidades'\n                    : 'Escolha o servi√ßo que melhor se adapta √†s suas necessidades'\n                  }\n                </p>\n              </div>\n              \n              {!selectedVehicleType && (\n                <Alert className=\"bg-background border-border\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription className=\"text-muted-foreground\">\n                    {currentLanguage === 'es' \n                      ? 'Por favor selecciona tu tipo de veh√≠culo primero para ver los precios'\n                      : 'Por favor selecione o tipo de ve√≠culo primeiro para ver os pre√ßos'\n                    }\n                  </AlertDescription>\n                </Alert>\n              )}\n              \n              {servicesLoading && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  {currentLanguage === 'es' ? 'Cargando servicios...' : 'Carregando servi√ßos...'}\n                </div>\n              )}\n              \n              {servicesError && (\n                <div className=\"text-center py-8 text-red-500\">\n                  {currentLanguage === 'es' ? 'Error al cargar servicios' : 'Erro ao carregar servi√ßos'}\n                </div>\n              )}\n              \n              {!servicesLoading && !servicesError && services.length > 0 && (\n                <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n                  {services.map((service) => (\n                    <NewServiceCard\n                      key={service.slug}\n                      service={service}\n                      selectedVehicleType={selectedVehicleType}\n                      language={currentLanguage}\n                      onReserve={handleServiceReserve}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"bookings\" className=\"space-y-4\">\n            {bookingsLoading && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {currentLanguage === 'es' ? 'Cargando reservas...' : 'Carregando reservas...'}\n              </div>\n            )}\n            \n            {bookingsError && (\n              <div className=\"text-center py-8 text-red-500\">\n                {currentLanguage === 'es' ? 'Error al cargar reservas' : 'Erro ao carregar reservas'}\n              </div>\n            )}\n            \n            {!bookingsLoading && !bookingsError && userBookings.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {currentLanguage === 'es' ? 'No tienes reservas a√∫n' : 'Voc√™ n√£o tem reservas ainda'}\n              </div>\n            )}\n            \n            {!bookingsLoading && !bookingsError && userBookings.length > 0 && (\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                {userBookings.map((booking) => {\n                  // Convert booking data to format expected by BookingCard\n                  const service = services.find(s => s.id === booking.serviceId);\n                  const serviceName = service ? (currentLanguage === 'es' ? service.titleEs : service.titlePt) : 'Servicio';\n                  \n                  return (\n                    <BookingCard\n                      key={booking.id}\n                      id={booking.id}\n                      serviceName={serviceName}\n                      vehiclePlate={`Booking-${booking.id.slice(-4)}`}\n                      date={booking.date}\n                      timeSlot={booking.timeSlot}\n                      status={booking.status}\n                      price={booking.price}\n                      paymentMethod={'cash'}\n                      paymentStatus={'pending'}\n                      onViewDetails={handleOrderDetails}\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"profile\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>{t.profile}</CardTitle>\n                <CardDescription>\n                  {currentLanguage === 'es' \n                    ? 'Informaci√≥n de tu cuenta'\n                    : 'Informa√ß√µes da sua conta'\n                  }\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">\n                      {currentLanguage === 'es' ? 'Nombre' : 'Nome'}\n                    </label>\n                    <p className=\"text-muted-foreground\">Cliente Milos'Shop</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Email</label>\n                    <p className=\"text-muted-foreground\">cliente@milosshop.com</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">\n                      {currentLanguage === 'es' ? 'Estado' : 'Status'}\n                    </label>\n                    <Badge variant=\"outline\" className=\"ml-2\">\n                      {currentLanguage === 'es' ? 'Activo' : 'Ativo'}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":12512},"client/src/components/CustomerPortal.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport ServiceCard from \"./ServiceCard\";\nimport BookingCard from \"./BookingCard\";\nimport VehicleSelector from \"./VehicleSelector\";\nimport { CalendarDays, Car, Plus, History } from \"lucide-react\";\n\ninterface Service {\n  id: string;\n  nameKey: string;\n  title: string;\n  description: string;\n  prices: {\n    auto?: number;\n    suv?: number;\n    camioneta?: number;\n  };\n  duration?: number;\n}\n\ninterface CustomerPortalProps {\n  services: Service[];\n  userBookings: any[];\n  onBookService: (serviceId: string, vehicleType: string) => void;\n  onViewBookingDetails: (bookingId: string) => void;\n  language?: 'es' | 'pt';\n}\n\nexport default function CustomerPortal({ \n  services, \n  userBookings, \n  onBookService, \n  onViewBookingDetails,\n  language = 'es'\n}: CustomerPortalProps) {\n  const [selectedVehicleType, setSelectedVehicleType] = useState<'auto' | 'suv' | 'camioneta' | null>(null);\n\n  const handleServiceSelect = (serviceId: string) => {\n    if (!selectedVehicleType) {\n      alert('Por favor selecciona el tipo de veh√≠culo primero');\n      return;\n    }\n    onBookService(serviceId, selectedVehicleType);\n  };\n\n  const activeBookings = userBookings.filter(booking => \n    booking.status === 'waiting' || booking.status === 'washing'\n  );\n\n  const completedBookings = userBookings.filter(booking => \n    booking.status === 'done'\n  );\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Lavadero Moderno</h1>\n        <p className=\"text-muted-foreground\">\n          Agenda tu servicio y rastrea el estado en tiempo real\n        </p>\n      </div>\n\n      {/* Active Bookings Alert */}\n      {activeBookings.length > 0 && (\n        <Card className=\"border-primary bg-primary/5\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-primary\">\n              <Car className=\"h-5 w-5\" />\n              Servicios activos\n            </CardTitle>\n            <CardDescription>\n              Tienes {activeBookings.length} servicio(s) en progreso\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {activeBookings.map((booking) => (\n              <BookingCard\n                key={booking.id}\n                {...booking}\n                onViewDetails={onViewBookingDetails}\n              />\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      <Tabs defaultValue=\"book\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"book\" data-testid=\"tab-book-service\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Agendar servicio\n          </TabsTrigger>\n          <TabsTrigger value=\"history\" data-testid=\"tab-booking-history\">\n            <History className=\"h-4 w-4 mr-2\" />\n            Historial\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"book\" className=\"space-y-6\">\n          {/* Vehicle Selection */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Paso 1: Selecciona tu veh√≠culo</CardTitle>\n              <CardDescription>\n                Elige el tipo de veh√≠culo para ver los precios correspondientes\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <VehicleSelector\n                selectedType={selectedVehicleType}\n                onSelect={setSelectedVehicleType}\n                language={language}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Service Selection */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Paso 2: Elige tu servicio</CardTitle>\n              <CardDescription>\n                Selecciona el servicio que deseas para tu veh√≠culo\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                {services.map((service) => (\n                  <ServiceCard\n                    key={service.id}\n                    {...service}\n                    onSelect={handleServiceSelect}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {completedBookings.length > 0 ? (\n              completedBookings.map((booking) => (\n                <BookingCard\n                  key={booking.id}\n                  {...booking}\n                  onViewDetails={onViewBookingDetails}\n                />\n              ))\n            ) : (\n              <Card className=\"col-span-full\">\n                <CardContent className=\"text-center py-12\">\n                  <CalendarDays className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">Sin historial</h3>\n                  <p className=\"text-muted-foreground\">\n                    A√∫n no has completado ning√∫n servicio\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":5525},"client/src/components/Header.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport LanguageToggle from \"./LanguageToggle\";\n\ninterface HeaderProps {\n  currentLanguage: 'es' | 'pt';\n  onLanguageChange: (language: 'es' | 'pt') => void;\n}\n\nexport default function Header({ currentLanguage, onLanguageChange }: HeaderProps) {\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-16 items-center justify-between px-4\">\n        <div className=\"flex items-center space-x-3\">\n          <img \n            src=\"/milos-logo.png\" \n            alt=\"Milos'Shop logo\" \n            className=\"h-8 w-8\"\n            onError={(e) => {\n              // Hide broken image if logo not found\n              e.currentTarget.style.display = 'none';\n            }}\n          />\n          <Link href=\"/\" className=\"text-xl font-bold text-foreground hover:text-primary transition-colors\">\n            Milos'Shop\n          </Link>\n        </div>\n        \n        <nav className=\"flex items-center space-x-3\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-home\">\n              Home\n            </Button>\n          </Link>\n          <LanguageToggle \n            currentLanguage={currentLanguage}\n            onLanguageChange={onLanguageChange}\n          />\n        </nav>\n      </div>\n    </header>\n  );\n}","size_bytes":1455},"client/src/components/Home.tsx":{"content":"import { useLocation } from \"wouter\";\nimport \"../styles/home.css\";\nimport LogoSilhouette from \"./LogoSilhouette\";\n\ninterface HomeProps {\n  language?: 'es' | 'pt';\n}\n\nexport default function Home({ language = 'es' }: HomeProps) {\n  const [, navigate] = useLocation();\n\n  const content = {\n    es: {\n      title: \"Milos'Shop\",\n      welcome: \"Bienvenido, tu auto merece lo mejor üöóüí®\",\n      cliente: \"Cliente\",\n      admin: \"Administrador\",\n      clienteDesc: \"Acceso para clientes\",\n      adminDesc: \"Panel de administraci√≥n\",\n      contact: \"üìû +595 981278517\"\n    },\n    pt: {\n      title: \"Milos'Shop\", \n      welcome: \"Bem-vindo, seu carro merece o melhor üöóüí®\",\n      cliente: \"Cliente\",\n      admin: \"Administrador\", \n      clienteDesc: \"Acesso para clientes\",\n      adminDesc: \"Painel de administra√ß√£o\",\n      contact: \"üìû +595 981278517\"\n    }\n  };\n\n  const t = content[language];\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n    console.log(`Navigating to: ${path}`);\n  };\n\n  return (\n    <main className=\"home\">\n      <div className=\"brand\">\n        <div className=\"logo-ring\">\n          <LogoSilhouette />\n        </div>\n        <h1 className=\"title\">{t.title}</h1>\n        <p className=\"welcome\">\n          {t.welcome.split(' üöóüí®')[0]} <span className=\"emoji\">üöóüí®</span>\n        </p>\n      </div>\n      \n      <section className=\"panel\">\n        <button \n          className=\"btn-card\" \n          onClick={() => handleNavigation('/cliente')}\n          aria-label={t.clienteDesc}\n          data-testid=\"button-cliente\"\n        >\n          <div className=\"btn-title\">{t.cliente}</div>\n          <div className=\"btn-sub\">{t.clienteDesc}</div>\n        </button>\n        \n        <button \n          className=\"btn-card\" \n          onClick={() => handleNavigation('/admin')}\n          aria-label={t.adminDesc}\n          data-testid=\"button-admin\"\n        >\n          <div className=\"btn-title\">{t.admin}</div>\n          <div className=\"btn-sub\">{t.adminDesc}</div>\n        </button>\n      </section>\n      \n      <footer className=\"contact\">\n        <a href=\"tel:+595981278517\">{t.contact}</a>\n      </footer>\n    </main>\n  );\n}","size_bytes":2182},"client/src/components/LandingPage.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport LanguageToggle from \"./LanguageToggle\";\nimport { \n  Droplets, \n  Clock, \n  Shield, \n  Star, \n  MapPin, \n  Phone, \n  MessageCircle,\n  Car,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface LandingPageProps {\n  currentLanguage: 'es' | 'pt';\n  onLanguageChange: (language: 'es' | 'pt') => void;\n  onBookNow: () => void;\n  onLogin: () => void;\n}\n\nexport default function LandingPage({ \n  currentLanguage, \n  onLanguageChange, \n  onBookNow, \n  onLogin \n}: LandingPageProps) {\n  const content = {\n    es: {\n      title: \"Lavadero Moderno\",\n      subtitle: \"Servicio profesional de lavado para tu veh√≠culo\",\n      cta: \"Agendar ahora\",\n      login: \"Iniciar sesi√≥n\",\n      features: [\n        {\n          icon: Droplets,\n          title: \"Productos Premium\",\n          description: \"Usamos shampoo V-Floc y ceras carnauba de alta calidad\"\n        },\n        {\n          icon: Clock,\n          title: \"Servicio R√°pido\", \n          description: \"Tiempos optimizados sin comprometer la calidad\"\n        },\n        {\n          icon: Shield,\n          title: \"Protecci√≥n Garantizada\",\n          description: \"Cuidamos tu veh√≠culo como si fuera nuestro\"\n        }\n      ],\n      services: \"Nuestros Servicios\",\n      contact: \"Contacto\",\n      location: \"Ubicaci√≥n\",\n      whatsapp: \"WhatsApp\",\n      hours: \"Horarios de atenci√≥n\"\n    },\n    pt: {\n      title: \"Lavadero Moderno\",\n      subtitle: \"Servi√ßo profissional de lavagem para seu ve√≠culo\",\n      cta: \"Agendar agora\",\n      login: \"Entrar\",\n      features: [\n        {\n          icon: Droplets,\n          title: \"Produtos Premium\",\n          description: \"Usamos shampoo V-Floc e ceras carnauba de alta qualidade\"\n        },\n        {\n          icon: Clock,\n          title: \"Servi√ßo R√°pido\",\n          description: \"Tempos otimizados sem comprometer a qualidade\"\n        },\n        {\n          icon: Shield,\n          title: \"Prote√ß√£o Garantida\",\n          description: \"Cuidamos do seu ve√≠culo como se fosse nosso\"\n        }\n      ],\n      services: \"Nossos Servi√ßos\",\n      contact: \"Contato\",\n      location: \"Localiza√ß√£o\",\n      whatsapp: \"WhatsApp\",\n      hours: \"Hor√°rios de atendimento\"\n    }\n  };\n\n  const t = content[currentLanguage];\n\n  const services = [\n    {\n      name: currentLanguage === 'es' ? \"Ducha y aspirado\" : \"Lavagem e aspira√ß√£o\",\n      price: \"50.000 Gs\",\n      features: [\"Shampoo V-Floc\", \"Aspirado completo\"]\n    },\n    {\n      name: currentLanguage === 'es' ? \"Lavado + encerado\" : \"Lavagem + enceramento\", \n      price: \"70.000 Gs\",\n      features: [\"Shampoo V-Floc\", \"Cera carnauba Plus\", \"Cera Native carnauba\"]\n    },\n    {\n      name: currentLanguage === 'es' ? \"Pulida Comercial\" : \"Polimento Comercial\",\n      price: \"300.000 Gs\", \n      features: [\"Lavado completo\", \"Pulida 2 pasos\", \"Protecci√≥n 1 a√±o\"]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n        <div className=\"container flex h-16 items-center justify-between px-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Droplets className=\"h-6 w-6 text-primary\" />\n            <span className=\"text-xl font-bold text-foreground\">{t.title}</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <LanguageToggle \n              currentLanguage={currentLanguage}\n              onLanguageChange={onLanguageChange}\n            />\n            <Button \n              variant=\"ghost\" \n              onClick={onLogin}\n              data-testid=\"button-login\"\n            >\n              {t.login}\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 text-center bg-gradient-to-b from-background to-secondary/20\">\n        <div className=\"container max-w-4xl\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n            {t.title}\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            {t.subtitle}\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={onBookNow}\n            className=\"text-lg px-8 py-6\"\n            data-testid=\"button-book-now\"\n          >\n            <Car className=\"h-5 w-5 mr-2\" />\n            {t.cta}\n          </Button>\n        </div>\n      </section>\n\n      {/* Features */}\n      <section className=\"py-16 px-4\">\n        <div className=\"container max-w-6xl\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {t.features.map((feature, index) => {\n              const IconComponent = feature.icon;\n              return (\n                <Card key={index} className=\"text-center\">\n                  <CardHeader>\n                    <IconComponent className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                    <CardTitle>{feature.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription>{feature.description}</CardDescription>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Services */}\n      <section className=\"py-16 px-4 bg-secondary/20\">\n        <div className=\"container max-w-6xl\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">{t.services}</h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {services.map((service, index) => (\n              <Card key={index} className=\"hover-elevate\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl\">{service.name}</CardTitle>\n                  <div className=\"text-2xl font-bold text-primary\">{service.price}</div>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {service.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        <span className=\"text-sm\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact */}\n      <section className=\"py-16 px-4\">\n        <div className=\"container max-w-4xl\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">{t.contact}</h2>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"h-5 w-5 text-primary\" />\n                  {t.location}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Av. Principal 123<br />\n                  Asunci√≥n, Paraguay\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageCircle className=\"h-5 w-5 text-primary\" />\n                  {t.whatsapp}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Phone className=\"h-4 w-4 mr-2\" />\n                  +595 21 123 456\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-8 px-4 text-center\">\n        <div className=\"container\">\n          <p className=\"text-muted-foreground\">\n            ¬© 2024 {t.title}. Todos los derechos reservados.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":8211},"client/src/components/LanguageToggle.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Globe } from \"lucide-react\";\n\ninterface LanguageToggleProps {\n  currentLanguage: 'es' | 'pt';\n  onLanguageChange: (language: 'es' | 'pt') => void;\n}\n\nconst languages = {\n  es: { name: 'Espa√±ol', flag: 'üá™üá∏' },\n  pt: { name: 'Portugu√™s', flag: 'üáßüá∑' }\n};\n\nexport default function LanguageToggle({ currentLanguage, onLanguageChange }: LanguageToggleProps) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          className=\"gap-2\"\n          data-testid=\"button-language-toggle\"\n        >\n          <Globe className=\"h-4 w-4\" />\n          <span className=\"hidden sm:inline\">\n            {languages[currentLanguage].flag} {languages[currentLanguage].name}\n          </span>\n          <span className=\"sm:hidden\">\n            {languages[currentLanguage].flag}\n          </span>\n        </Button>\n      </DropdownMenuTrigger>\n      \n      <DropdownMenuContent align=\"end\">\n        {Object.entries(languages).map(([code, lang]) => (\n          <DropdownMenuItem\n            key={code}\n            onClick={() => onLanguageChange(code as 'es' | 'pt')}\n            className={`gap-2 ${currentLanguage === code ? 'bg-accent' : ''}`}\n            data-testid={`menu-item-language-${code}`}\n          >\n            <span>{lang.flag}</span>\n            <span>{lang.name}</span>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1638},"client/src/components/PaymentSelector.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CreditCard, Smartphone, Banknote, QrCode } from \"lucide-react\";\n\ninterface PaymentMethod {\n  id: 'card' | 'pix' | 'cash';\n  name: string;\n  description: string;\n  icon: React.ComponentType<any>;\n  badge?: string;\n  available: boolean;\n}\n\ninterface PaymentSelectorProps {\n  selectedMethod: 'card' | 'pix' | 'cash' | null;\n  amount: number;\n  onSelect: (method: 'card' | 'pix' | 'cash') => void;\n  onConfirmPayment: () => void;\n  language?: 'es' | 'pt';\n}\n\nexport default function PaymentSelector({ \n  selectedMethod, \n  amount, \n  onSelect, \n  onConfirmPayment,\n  language = 'es' \n}: PaymentSelectorProps) {\n  const content = {\n    es: {\n      title: \"M√©todo de pago\",\n      subtitle: \"Selecciona c√≥mo deseas pagar tu servicio\",\n      total: \"Total a pagar\",\n      confirm: \"Confirmar pago\",\n      selectMethod: \"Selecciona un m√©todo de pago\"\n    },\n    pt: {\n      title: \"M√©todo de pagamento\",\n      subtitle: \"Selecione como deseja pagar seu servi√ßo\",\n      total: \"Total a pagar\",\n      confirm: \"Confirmar pagamento\",\n      selectMethod: \"Selecione um m√©todo de pagamento\"\n    }\n  };\n\n  const t = content[language];\n\n  const paymentMethods: PaymentMethod[] = [\n    {\n      id: 'card',\n      name: language === 'es' ? 'Tarjeta de cr√©dito/d√©bito' : 'Cart√£o de cr√©dito/d√©bito',\n      description: language === 'es' ? 'Pago instant√°neo con tarjeta' : 'Pagamento instant√¢neo com cart√£o',\n      icon: CreditCard,\n      available: true\n    },\n    {\n      id: 'pix',\n      name: 'PIX',\n      description: language === 'es' ? 'Transferencia inmediata' : 'Transfer√™ncia imediata',\n      icon: QrCode,\n      badge: language === 'es' ? 'Popular' : 'Popular',\n      available: true\n    },\n    {\n      id: 'cash',\n      name: language === 'es' ? 'Efectivo' : 'Dinheiro',\n      description: language === 'es' ? 'Pagar en el local' : 'Pagar no local',\n      icon: Banknote,\n      available: true\n    }\n  ];\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('es-PY', {\n      style: 'currency',\n      currency: 'PYG',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <h2 className=\"text-2xl font-bold text-foreground\">{t.title}</h2>\n        <p className=\"text-muted-foreground\">{t.subtitle}</p>\n      </div>\n\n      {/* Total Amount */}\n      <Card className=\"border-primary bg-primary/5\">\n        <CardContent className=\"text-center py-6\">\n          <div className=\"text-sm text-muted-foreground mb-2\">{t.total}</div>\n          <div className=\"text-3xl font-bold text-primary\">\n            {formatPrice(amount)}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payment Methods */}\n      <div className=\"space-y-3\">\n        {paymentMethods.map((method) => {\n          const IconComponent = method.icon;\n          const isSelected = selectedMethod === method.id;\n          \n          return (\n            <Card \n              key={method.id}\n              className={`cursor-pointer transition-all hover-elevate ${\n                isSelected \n                  ? 'ring-2 ring-primary border-primary bg-primary/5' \n                  : 'border-border'\n              } ${!method.available ? 'opacity-50 cursor-not-allowed' : ''}`}\n              onClick={() => method.available && onSelect(method.id)}\n              data-testid={`card-payment-${method.id}`}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <IconComponent \n                      className={`h-6 w-6 ${\n                        isSelected ? 'text-primary' : 'text-muted-foreground'\n                      }`} \n                    />\n                    <div>\n                      <div className=\"flex items-center gap-2\">\n                        <h4 className={`font-medium ${\n                          isSelected ? 'text-primary' : 'text-foreground'\n                        }`}>\n                          {method.name}\n                        </h4>\n                        {method.badge && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {method.badge}\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {method.description}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {isSelected && (\n                    <div className=\"w-4 h-4 bg-primary rounded-full flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-white rounded-full\" />\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Confirm Button */}\n      <Button \n        onClick={onConfirmPayment}\n        disabled={!selectedMethod}\n        className=\"w-full py-6 text-lg\"\n        data-testid=\"button-confirm-payment\"\n      >\n        {selectedMethod ? t.confirm : t.selectMethod}\n      </Button>\n\n      {/* PIX QR Code (Mock) */}\n      {selectedMethod === 'pix' && (\n        <Card className=\"border-dashed\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              <QrCode className=\"h-5 w-5\" />\n              C√≥digo PIX\n            </CardTitle>\n            <CardDescription>\n              {language === 'es' \n                ? 'Escanea el c√≥digo QR para realizar el pago' \n                : 'Escaneie o c√≥digo QR para realizar o pagamento'\n              }\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center py-8\">\n            <div className=\"w-32 h-32 bg-muted rounded-lg mx-auto flex items-center justify-center\">\n              <QrCode className=\"h-16 w-16 text-muted-foreground\" />\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-4\">\n              {language === 'es' \n                ? 'En la aplicaci√≥n real se mostrar√≠a el c√≥digo QR real' \n                : 'No aplicativo real seria mostrado o c√≥digo QR real'\n              }\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":6618},"client/src/components/ServiceCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, ImagePlus, Image } from \"lucide-react\";\nimport { useRef, useState } from 'react';\nimport type { Service } from \"@shared/schema\";\n\ninterface ServiceCardProps {\n  service: Service;\n  language: 'es' | 'pt';\n  onReserve: (slug: string) => void;\n  onUploadImage?: (slug: string, file: File) => void;\n}\n\nexport default function ServiceCard({ \n  service,\n  language,\n  onReserve,\n  onUploadImage\n}: ServiceCardProps) {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [previewImage, setPreviewImage] = useState<string | null>(null);\n  const title = language === 'es' ? service.titleEs : service.titlePt;\n  const subtitle = language === 'es' ? service.subtitleEs : service.subtitlePt;\n  const copy = language === 'es' ? service.copyEs : service.copyPt;\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('es-PY', {\n      style: 'currency',\n      currency: 'PYG',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const vehicleNames = {\n    es: { auto: \"Auto\", suv: \"SUV\", camioneta: \"Camioneta\" },\n    pt: { auto: \"Auto\", suv: \"SUV\", camioneta: \"Caminhonete\" }\n  };\n\n  const t = vehicleNames[language];\n  const buttonText = language === 'es' ? 'Seleccionar' : 'Selecionar';\n  \n  const handleImageUpload = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPreviewImage(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n      \n      // Call upload function\n      onUploadImage?.(service.slug, file);\n    }\n  };\n\n  return (\n    <Card className=\"w-full hover-elevate\" data-testid={`card-service-${service.slug}`}>\n      {/* √Årea para agregar imagem da galeria */}\n      <div className=\"p-3 pb-0\">\n        <div className=\"w-full h-40 bg-muted rounded-lg flex items-center justify-center border-2 border-dashed border-muted-foreground/25 relative overflow-hidden\">\n          {previewImage ? (\n            <div className=\"relative w-full h-full\">\n              <img \n                src={previewImage} \n                alt={`Preview ${title}`}\n                className=\"w-full h-full object-cover rounded-md\"\n              />\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={handleImageUpload}\n                className=\"absolute bottom-2 right-2 h-8 w-8 p-1\"\n                data-testid={`button-change-image-${service.slug}`}\n              >\n                <Image className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          ) : (\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleImageUpload}\n              className=\"flex items-center gap-2 text-muted-foreground hover:text-foreground\"\n              data-testid={`button-upload-image-${service.slug}`}\n            >\n              <ImagePlus className=\"h-4 w-4\" />\n              {language === 'es' ? 'Agregar Imagen' : 'Adicionar Imagem'}\n            </Button>\n          )}\n        </div>\n        \n        {/* Hidden file input */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleFileChange}\n          className=\"hidden\"\n          data-testid={`input-file-${service.slug}`}\n        />\n      </div>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n          {title}\n          {service.durationMin && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              {service.durationMin} min\n            </Badge>\n          )}\n        </CardTitle>\n        <CardDescription className=\"text-sm text-muted-foreground\">\n          {subtitle}\n        </CardDescription>\n        <p className=\"text-sm text-muted-foreground\">{copy}</p>\n      </CardHeader>\n      \n      <CardContent className=\"pb-4 space-y-2\">\n        <div className=\"space-y-1\">\n          {service.prices.auto != null && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm\">{t.auto}</span>\n              <span className=\"font-bold\">{formatPrice(service.prices.auto)}</span>\n            </div>\n          )}\n          {service.prices.suv != null && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm\">{t.suv}</span>\n              <span className=\"font-bold\">{formatPrice(service.prices.suv)}</span>\n            </div>\n          )}\n          {service.prices.camioneta != null && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm\">{t.camioneta}</span>\n              <span className=\"font-bold\">{formatPrice(service.prices.camioneta)}</span>\n            </div>\n          )}\n        </div>\n      </CardContent>\n      \n      <CardFooter>\n        <Button \n          onClick={() => onReserve(service.slug)}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"mx-auto\"\n          data-testid={`button-select-${service.slug}`}\n        >\n          {buttonText}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":5559},"client/src/components/StatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Clock, Droplets, CheckCircle, XCircle } from \"lucide-react\";\n\ninterface StatusBadgeProps {\n  status: 'waiting' | 'washing' | 'done' | 'cancelled';\n  text?: string;\n  size?: 'sm' | 'default';\n}\n\nconst statusConfig = {\n  waiting: {\n    variant: 'secondary' as const,\n    icon: Clock,\n    defaultText: 'En espera',\n    color: '#9CA3AF',\n    bgColor: 'bg-gray-100', \n    textColor: 'text-gray-400',\n    emoji: '‚è≥'\n  },\n  washing: {\n    variant: 'default' as const, \n    icon: Droplets,\n    defaultText: 'En lavado',\n    color: '#F97316',\n    bgColor: 'bg-orange-100',\n    textColor: 'text-orange-500',\n    emoji: 'üöø'\n  },\n  done: {\n    variant: 'outline' as const,\n    icon: CheckCircle,\n    defaultText: 'Finalizado',\n    color: '#16A34A',\n    bgColor: 'bg-green-100',\n    textColor: 'text-green-600',\n    emoji: '‚úÖ'\n  },\n  cancelled: {\n    variant: 'destructive' as const,\n    icon: XCircle,\n    defaultText: 'Cancelado',\n    color: '#DC2626',\n    bgColor: 'bg-red-100',\n    textColor: 'text-red-600',\n    emoji: '‚úñÔ∏è'\n  }\n};\n\nexport default function StatusBadge({ status, text, size = 'default' }: StatusBadgeProps) {\n  const config = statusConfig[status];\n  const displayText = text || config.defaultText;\n\n  return (\n    <Badge \n      variant=\"outline\"\n      className={`flex items-center gap-1 ${config.bgColor} ${config.textColor} border-current`}\n      data-testid={`badge-status-${status}`}\n    >\n      <span className=\"text-sm\">{config.emoji}</span>\n      <span className={size === 'sm' ? 'text-xs' : 'text-sm'}>\n        {displayText}\n      </span>\n    </Badge>\n  );\n}","size_bytes":1640},"client/src/components/VehicleSelector.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Car, Truck, Caravan } from \"lucide-react\";\n\ninterface VehicleSelectorProps {\n  selectedType: 'auto' | 'suv' | 'camioneta' | null;\n  onSelect: (type: 'auto' | 'suv' | 'camioneta') => void;\n  disabled?: boolean;\n  language?: 'es' | 'pt';\n}\n\nconst getVehicleTypes = (language: 'es' | 'pt') => [\n  {\n    id: 'auto' as const,\n    name: language === 'es' ? 'Auto' : 'Auto',\n    icon: Car,\n    description: language === 'es' ? 'Veh√≠culo est√°ndar' : 'Ve√≠culo padr√£o'\n  },\n  {\n    id: 'suv' as const,\n    name: 'SUV',\n    icon: Caravan,\n    description: language === 'es' ? 'Veh√≠culo utilitario deportivo' : 'Ve√≠culo utilit√°rio esportivo'\n  },\n  {\n    id: 'camioneta' as const,\n    name: language === 'es' ? 'Camioneta' : 'Caminhonete',\n    icon: Truck,\n    description: language === 'es' ? 'Camioneta pickup' : 'Caminhonete pickup'\n  }\n];\n\nconst getTranslations = (language: 'es' | 'pt') => ({\n  vehicleType: language === 'es' ? 'Tipo de veh√≠culo' : 'Tipo de ve√≠culo',\n  clickHere: language === 'es' ? 'Seleccionar veh√≠culo' : 'Selecionar ve√≠culo',\n  chooseVehicle: language === 'es' ? 'Elige tu veh√≠culo' : 'Escolha seu ve√≠culo',\n  cancel: language === 'es' ? 'Cancelar' : 'Cancelar',\n  selectVehicle: language === 'es' ? 'Selecciona tu veh√≠culo' : 'Selecione seu ve√≠culo',\n  selectedVehicle: language === 'es' ? 'Veh√≠culo seleccionado:' : 'Ve√≠culo selecionado:'\n});\n\nexport default function VehicleSelector({ selectedType, onSelect, disabled = false, language = 'es' }: VehicleSelectorProps) {\n  const [open, setOpen] = useState(false);\n  const vehicleTypes = getVehicleTypes(language);\n  const t = getTranslations(language);\n  \n  const selectedVehicle = vehicleTypes.find(v => v.id === selectedType);\n  \n  return (\n    <div className=\"space-y-3\">\n      <h3 className=\"text-sm font-medium text-foreground\">{t.vehicleType}</h3>\n      <p className=\"text-xs text-muted-foreground\">{t.selectVehicle}</p>\n      \n      {/* Bot√£o que substitui o select */}\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogTrigger asChild>\n          <Button\n            variant=\"destructive\"\n            className=\"w-full py-3 px-6 text-base font-medium\"\n            disabled={disabled}\n            data-testid=\"button-vehicle-selector\"\n          >\n            {t.clickHere}\n          </Button>\n        </DialogTrigger>\n        \n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>{t.chooseVehicle}</DialogTitle>\n            <DialogDescription>\n              {language === 'es' \n                ? 'Selecciona el tipo de veh√≠culo para continuar' \n                : 'Selecione o tipo de ve√≠culo para continuar'}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex flex-col gap-3 py-4\">\n            {vehicleTypes.map((vehicle) => {\n              const IconComponent = vehicle.icon;\n              return (\n                <Button\n                  key={vehicle.id}\n                  variant=\"outline\"\n                  className=\"justify-start h-auto p-4 hover-elevate\"\n                  onClick={() => {\n                    onSelect(vehicle.id);\n                    setOpen(false);\n                  }}\n                  data-testid={`button-vehicle-${vehicle.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <IconComponent className=\"h-6 w-6 text-muted-foreground\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-medium text-foreground\">\n                        ‚ñ† {vehicle.name}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {vehicle.description}\n                      </div>\n                    </div>\n                  </div>\n                </Button>\n              );\n            })}\n          </div>\n          \n          <Button\n            variant=\"secondary\"\n            onClick={() => setOpen(false)}\n            data-testid=\"button-cancel-vehicle\"\n          >\n            {t.cancel}\n          </Button>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Mostra o ve√≠culo selecionado */}\n      {selectedVehicle && (\n        <p className=\"text-sm text-foreground\" data-testid=\"text-selected-vehicle\">\n          {t.selectedVehicle} <strong>‚ñ† {selectedVehicle.name}</strong>\n        </p>\n      )}\n    </div>\n  );\n}","size_bytes":4628},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AdminApp.tsx":{"content":"import AdminApp from '../AdminApp';\n\nexport default function AdminAppExample() {\n  return <AdminApp language=\"es\" />;\n}","size_bytes":119},"client/src/components/examples/AdminDashboard.tsx":{"content":"import AdminDashboard from '../AdminDashboard';\n\nexport default function AdminDashboardExample() {\n  // Mock dashboard data\n  const mockStats = {\n    todayBookings: 12,\n    activeWashing: 3,\n    completedToday: 8,\n    todayRevenue: 450000,\n    avgServiceTime: 35\n  };\n\n  const mockBookings = [\n    {\n      id: \"booking-1\",\n      serviceName: \"Ducha y aspirado\",\n      vehiclePlate: \"ABC-1234\",\n      date: \"2024-03-15\",\n      timeSlot: \"09:00 - 09:30\",\n      status: 'waiting' as const,\n      price: 50000,\n      paymentMethod: 'card' as const,\n      paymentStatus: 'pending' as const\n    },\n    {\n      id: \"booking-2\",\n      serviceName: \"Lavado + encerado\",\n      vehiclePlate: \"XYZ-5678\",\n      date: \"2024-03-15\",\n      timeSlot: \"10:00 - 10:45\",\n      status: 'washing' as const,\n      price: 70000,\n      paymentMethod: 'cash' as const,\n      paymentStatus: 'paid' as const\n    },\n    {\n      id: \"booking-3\",\n      serviceName: \"Pulida Comercial\",\n      vehiclePlate: \"DEF-9012\",\n      date: \"2024-03-15\",\n      timeSlot: \"08:00 - 10:00\",\n      status: 'done' as const,\n      price: 300000,\n      paymentMethod: 'pix' as const,\n      paymentStatus: 'paid' as const\n    }\n  ];\n\n  const handleStatusUpdate = (bookingId: string, newStatus: string) => {\n    console.log('Admin status update:', bookingId, newStatus);\n  };\n\n  const handleViewDetails = (bookingId: string) => {\n    console.log('Admin view details:', bookingId);\n  };\n\n  return (\n    <AdminDashboard\n      stats={mockStats}\n      todayBookings={mockBookings}\n      onStatusUpdate={handleStatusUpdate}\n      onViewDetails={handleViewDetails}\n    />\n  );\n}","size_bytes":1622},"client/src/components/examples/BookingCard.tsx":{"content":"import BookingCard from '../BookingCard';\n\nexport default function BookingCardExample() {\n  const mockBooking = {\n    id: \"booking-123\",\n    serviceName: \"Ducha y aspirado\",\n    vehiclePlate: \"ABC-1234\",\n    date: \"2024-03-15\",\n    timeSlot: \"14:00 - 14:30\",\n    status: 'washing' as const,\n    price: 50000,\n    paymentMethod: 'card' as const,\n    paymentStatus: 'paid' as const\n  };\n\n  const handleStatusUpdate = (bookingId: string, newStatus: string) => {\n    console.log('Status updated:', bookingId, newStatus);\n  };\n\n  const handleViewDetails = (bookingId: string) => {\n    console.log('View details:', bookingId);\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      {/* Customer view */}\n      <div>\n        <h3 className=\"text-sm font-medium mb-2\">Vista Cliente</h3>\n        <BookingCard \n          {...mockBooking}\n          onViewDetails={handleViewDetails}\n        />\n      </div>\n      \n      {/* Admin view */}\n      <div>\n        <h3 className=\"text-sm font-medium mb-2\">Vista Administrador</h3>\n        <BookingCard \n          {...mockBooking}\n          status=\"waiting\"\n          onStatusUpdate={handleStatusUpdate}\n          onViewDetails={handleViewDetails}\n          isAdmin={true}\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":1249},"client/src/components/examples/ClienteApp.tsx":{"content":"import ClienteApp from '../ClienteApp';\n\nexport default function ClienteAppExample() {\n  return <ClienteApp language=\"es\" />;\n}","size_bytes":127},"client/src/components/examples/CustomerPortal.tsx":{"content":"import CustomerPortal from '../CustomerPortal';\n\nexport default function CustomerPortalExample() {\n  // Mock services data from specifications\n  const mockServices = [\n    {\n      id: \"wash-vacuum\",\n      nameKey: \"service.washVacuum\",\n      title: \"Ducha y aspirado\",\n      description: \"Shampoo V-Floc\",\n      prices: { auto: 50000, suv: 70000, camioneta: 100000 },\n      duration: 30\n    },\n    {\n      id: \"wash-wax\",\n      nameKey: \"service.washWax\", \n      title: \"Lavado + encerado\",\n      description: \"Shampoo V-Floc + Cera l√≠quida carnauba Plus + Cera en pasta Native carnauba\",\n      prices: { auto: 70000, suv: 90000, camioneta: 120000 },\n      duration: 45\n    },\n    {\n      id: \"polish-commercial\",\n      nameKey: \"service.polishCommercial\",\n      title: \"Pulida Comercial\", \n      description: \"Lavado interior/exterior + Pulida 2 pasos (V-Cut + V80) + protecci√≥n 1 a√±o\",\n      prices: { auto: 300000, suv: 350000, camioneta: 450000 },\n      duration: 120\n    }\n  ];\n\n  const mockBookings = [\n    {\n      id: \"booking-1\",\n      serviceName: \"Ducha y aspirado\",\n      vehiclePlate: \"ABC-1234\",\n      date: \"2024-03-15\",\n      timeSlot: \"14:00 - 14:30\",\n      status: 'washing' as const,\n      price: 50000,\n      paymentMethod: 'card' as const,\n      paymentStatus: 'paid' as const\n    },\n    {\n      id: \"booking-2\",\n      serviceName: \"Lavado + encerado\",\n      vehiclePlate: \"ABC-1234\",\n      date: \"2024-03-10\",\n      timeSlot: \"10:00 - 10:45\",\n      status: 'done' as const,\n      price: 70000,\n      paymentMethod: 'cash' as const,\n      paymentStatus: 'paid' as const\n    }\n  ];\n\n  const handleBookService = (serviceId: string, vehicleType: string) => {\n    console.log('Book service:', serviceId, 'for vehicle type:', vehicleType);\n    // In real app, this would navigate to booking flow\n  };\n\n  const handleViewBookingDetails = (bookingId: string) => {\n    console.log('View booking details:', bookingId);\n  };\n\n  return (\n    <CustomerPortal\n      services={mockServices}\n      userBookings={mockBookings}\n      onBookService={handleBookService}\n      onViewBookingDetails={handleViewBookingDetails}\n    />\n  );\n}","size_bytes":2141},"client/src/components/examples/Header.tsx":{"content":"import { useState } from 'react';\nimport Header from '../Header';\n\nexport default function HeaderExample() {\n  const [currentLanguage, setCurrentLanguage] = useState<'es' | 'pt'>('es');\n\n  const handleLanguageChange = (language: 'es' | 'pt') => {\n    setCurrentLanguage(language);\n    console.log('Language changed to:', language);\n  };\n\n  return (\n    <div>\n      <Header \n        currentLanguage={currentLanguage}\n        onLanguageChange={handleLanguageChange}\n      />\n      <div className=\"p-4 text-sm text-muted-foreground\">\n        Current language: {currentLanguage}\n      </div>\n    </div>\n  );\n}","size_bytes":605},"client/src/components/examples/Home.tsx":{"content":"import { useState } from 'react';\nimport Home from '../Home';\n\nexport default function HomeExample() {\n  const [language, setLanguage] = useState<'es' | 'pt'>('es');\n\n  return (\n    <div>\n      <div className=\"fixed top-4 right-4 z-50 flex gap-2\">\n        <button \n          onClick={() => setLanguage('es')}\n          className={`px-3 py-1 rounded text-sm ${language === 'es' ? 'bg-primary text-white' : 'bg-card text-card-foreground'}`}\n        >\n          ES\n        </button>\n        <button \n          onClick={() => setLanguage('pt')}\n          className={`px-3 py-1 rounded text-sm ${language === 'pt' ? 'bg-primary text-white' : 'bg-card text-card-foreground'}`}\n        >\n          PT\n        </button>\n      </div>\n      \n      <Home language={language} />\n    </div>\n  );\n}","size_bytes":784},"client/src/components/examples/LandingPage.tsx":{"content":"import { useState } from 'react';\nimport LandingPage from '../LandingPage';\n\nexport default function LandingPageExample() {\n  const [currentLanguage, setCurrentLanguage] = useState<'es' | 'pt'>('es');\n\n  const handleLanguageChange = (language: 'es' | 'pt') => {\n    setCurrentLanguage(language);\n    console.log('Language changed to:', language);\n  };\n\n  const handleBookNow = () => {\n    console.log('Book now clicked - would navigate to booking flow');\n  };\n\n  const handleLogin = () => {\n    console.log('Login clicked - would open login modal/page');\n  };\n\n  return (\n    <LandingPage\n      currentLanguage={currentLanguage}\n      onLanguageChange={handleLanguageChange}\n      onBookNow={handleBookNow}\n      onLogin={handleLogin}\n    />\n  );\n}","size_bytes":748},"client/src/components/examples/LanguageToggle.tsx":{"content":"import { useState } from 'react';\nimport LanguageToggle from '../LanguageToggle';\n\nexport default function LanguageToggleExample() {\n  const [currentLanguage, setCurrentLanguage] = useState<'es' | 'pt'>('es');\n\n  const handleLanguageChange = (language: 'es' | 'pt') => {\n    setCurrentLanguage(language);\n    console.log('Language changed to:', language);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-sm font-medium\">Seleccionar idioma</h3>\n        <LanguageToggle \n          currentLanguage={currentLanguage}\n          onLanguageChange={handleLanguageChange}\n        />\n      </div>\n      \n      <div className=\"mt-4 text-sm text-muted-foreground\">\n        Idioma actual: <span className=\"font-medium\">{currentLanguage === 'es' ? 'Espa√±ol' : 'Portugu√™s'}</span>\n      </div>\n    </div>\n  );\n}","size_bytes":879},"client/src/components/examples/PaymentSelector.tsx":{"content":"import { useState } from 'react';\nimport PaymentSelector from '../PaymentSelector';\n\nexport default function PaymentSelectorExample() {\n  const [selectedMethod, setSelectedMethod] = useState<'card' | 'pix' | 'cash' | null>(null);\n  const [language, setLanguage] = useState<'es' | 'pt'>('es');\n\n  const handleSelect = (method: 'card' | 'pix' | 'cash') => {\n    setSelectedMethod(method);\n    console.log('Payment method selected:', method);\n  };\n\n  const handleConfirmPayment = () => {\n    console.log('Payment confirmed with method:', selectedMethod);\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-medium\">Payment Selector</h3>\n        <div className=\"flex gap-2\">\n          <button \n            onClick={() => setLanguage('es')}\n            className={`px-3 py-1 rounded text-sm ${language === 'es' ? 'bg-primary text-white' : 'bg-gray-200'}`}\n          >\n            ES\n          </button>\n          <button \n            onClick={() => setLanguage('pt')}\n            className={`px-3 py-1 rounded text-sm ${language === 'pt' ? 'bg-primary text-white' : 'bg-gray-200'}`}\n          >\n            PT\n          </button>\n        </div>\n      </div>\n      \n      <PaymentSelector\n        selectedMethod={selectedMethod}\n        amount={75000}\n        onSelect={handleSelect}\n        onConfirmPayment={handleConfirmPayment}\n        language={language}\n      />\n    </div>\n  );\n}","size_bytes":1480},"client/src/components/examples/ServiceCard.tsx":{"content":"import ServiceCard from '../ServiceCard';\n\nexport default function ServiceCardExample() {\n  // Mock service data from specifications\n  const mockService = {\n    id: \"wash-vacuum\",\n    nameKey: \"service.washVacuum\",\n    title: \"Ducha y aspirado\",\n    description: \"Shampoo V-Floc\",\n    prices: {\n      auto: 50000,\n      suv: 70000,\n      camioneta: 100000\n    },\n    duration: 30,\n    imageUrl: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400&h=300&fit=crop&crop=center\"\n  };\n\n  const handleSelect = (serviceId: string) => {\n    console.log('Service selected:', serviceId);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <ServiceCard \n        {...mockService}\n        onSelect={handleSelect}\n      />\n    </div>\n  );\n}","size_bytes":737},"client/src/components/examples/StatusBadge.tsx":{"content":"import StatusBadge from '../StatusBadge';\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex flex-wrap gap-2\">\n        <StatusBadge status=\"waiting\" />\n        <StatusBadge status=\"washing\" />\n        <StatusBadge status=\"done\" />\n        <StatusBadge status=\"cancelled\" />\n      </div>\n      \n      <div className=\"flex flex-wrap gap-2\">\n        <StatusBadge status=\"waiting\" text=\"Em espera\" size=\"sm\" />\n        <StatusBadge status=\"washing\" text=\"Lavando\" size=\"sm\" />\n        <StatusBadge status=\"done\" text=\"Pronto\" size=\"sm\" />\n        <StatusBadge status=\"cancelled\" text=\"Cancelado\" size=\"sm\" />\n      </div>\n    </div>\n  );\n}","size_bytes":706},"client/src/components/examples/VehicleSelector.tsx":{"content":"import { useState } from 'react';\nimport VehicleSelector from '../VehicleSelector';\n\nexport default function VehicleSelectorExample() {\n  const [selectedType, setSelectedType] = useState<'auto' | 'suv' | 'camioneta' | null>(null);\n\n  const handleSelect = (type: 'auto' | 'suv' | 'camioneta') => {\n    setSelectedType(type);\n    console.log('Vehicle type selected:', type);\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <VehicleSelector \n        selectedType={selectedType}\n        onSelect={handleSelect}\n      />\n      \n      {selectedType && (\n        <div className=\"text-sm text-muted-foreground\">\n          Tipo seleccionado: <span className=\"font-medium\">{selectedType}</span>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":737},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/TestServices.tsx":{"content":"import { useState } from 'react';\nimport ServiceCard from '../components/ServiceCard';\nimport servicesData from '../data/services.json';\nimport type { Service } from '@shared/schema';\n\nexport default function TestServices() {\n  const [language, setLanguage] = useState<'es' | 'pt'>('es');\n\n  const handleServiceSelect = (slug: string) => {\n    console.log('Servi√ßo selecionado:', slug);\n    alert(`Servi√ßo selecionado: ${slug}`);\n  };\n\n  const handleGenerateImage = (slug: string) => {\n    console.log('Gerar imagem para:', slug);\n    alert(`Gerar imagem para: ${slug}`);\n  };\n\n  const handleLanguageToggle = () => {\n    setLanguage(current => current === 'es' ? 'pt' : 'es');\n  };\n\n  return (\n    <div style={{ minHeight: '100vh', backgroundColor: '#000', padding: '20px' }}>\n      <div style={{ maxWidth: '1200px', margin: '0 auto' }}>\n        {/* Header */}\n        <div style={{ textAlign: 'center', marginBottom: '30px' }}>\n          <h1 style={{ color: '#fff', fontSize: '2.5rem', marginBottom: '10px' }}>\n            Milos'Shop - Servi√ßos\n          </h1>\n          <button \n            onClick={handleLanguageToggle}\n            style={{\n              background: '#E10600',\n              color: 'white',\n              border: 'none',\n              padding: '10px 20px',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              fontWeight: '500'\n            }}\n          >\n            {language === 'es' ? 'Portugu√™s' : 'Espa√±ol'}\n          </button>\n        </div>\n\n        {/* Services Grid */}\n        <div style={{ \n          display: 'grid', \n          gap: '20px',\n          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))'\n        }}>\n          {servicesData.map(service => (\n            <ServiceCard\n              key={service.slug}\n              service={service as unknown as Service}\n              language={language}\n              onReserve={handleServiceSelect}\n              onGenerateImage={handleGenerateImage}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2049},"client/src/components/LogoSilhouette.tsx":{"content":"export default function LogoSilhouette() {\n  return (\n    <svg \n      className=\"logo-svg\" \n      viewBox=\"0 0 200 50\" \n      fill=\"none\" \n      xmlns=\"http://www.w3.org/2000/svg\" \n      aria-hidden=\"true\"\n    >\n      <path d=\"M5 30 C30 5, 110 5, 195 30\" stroke=\"white\" strokeWidth=\"4\" strokeLinecap=\"round\"/>\n      <path d=\"M55 30 Q100 15 145 30\" stroke=\"white\" strokeWidth=\"3\" strokeLinecap=\"round\"/>\n    </svg>\n  );\n}","size_bytes":420},"client/src/styles/home.css":{"content":"/* 1) Font stack com suporte a emoji */\n:root{\n  --bg:#000000;\n  --card:#ffffff;\n  --text-on-dark:#ffffff;\n  --muted:#A3ACB9;\n  --muted-2:#6B7280;\n  --accent:#E10600;\n  --radius:14px;\n  --shadow:0 10px 30px rgba(0,0,0,.45);\n  --safe: env(safe-area-inset-bottom, 20px);\n}\n\nhtml,body,#root{height:100%}\n\nbody{\n  font-family: Inter, Montserrat, system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Noto Color Emoji\", sans-serif;\n}\n\n/* 2) Layout */\n.home{\n  background:linear-gradient(180deg,#000 0%,#111 100%);\n  min-height:100vh;\n  color:var(--text-on-dark);\n  display:flex;\n  flex-direction:column;\n  align-items:center;\n  justify-content:center;\n  padding:20px;\n  padding-bottom: calc(24px + var(--safe));\n}\n\n.brand{\n  display:flex;\n  flex-direction:column;\n  align-items:center;\n  margin:40px 0 22px;\n}\n\n.logo-ring{\n  height:96px;\n  width:96px;\n  border:2px solid #fff;\n  border-radius:999px;\n  display:grid;\n  place-items:center;\n  margin-bottom:16px;\n}\n\n.logo-svg{\n  width:60px;\n  height:24px;\n  opacity:.95;\n}\n\n.title{\n  font-weight:800;\n  font-size:32px;\n  margin:0;\n  letter-spacing:.5px;\n}\n\n.welcome{\n  color:var(--muted);\n  margin:.55rem 0 1.1rem;\n  font-size:16px;\n  text-align:center;\n}\n\n.emoji{\n  font-family: \"Apple Color Emoji\",\"Segoe UI Emoji\",\"Noto Color Emoji\",emoji;\n}\n\n.panel{\n  background:var(--card);\n  color:#111;\n  border-radius:var(--radius);\n  box-shadow:var(--shadow);\n  max-width:560px;\n  width:90%;\n  padding:20px;\n}\n\n/* 3) Card e bot√µes */\n.panel .btn-card{\n  display:block;\n  width:100%;\n  text-align:left;\n  border-radius:12px;\n  padding:18px 20px;\n  margin:10px 0;\n  transition:all .2s ease;\n  text-decoration:none;\n  border:2px solid #E5E7EB;\n  cursor:pointer;\n  background:#fff;\n  color:#111;\n}\n\n.panel .btn-card:hover{\n  border-color:var(--accent);\n  box-shadow:0 0 0 4px rgba(225,6,0,.1);\n}\n\n.btn-title{\n  font-weight:700;\n  font-size:1.05rem;\n  margin:0;\n}\n\n.btn-sub{\n  color:var(--muted-2);\n  font-size:.95rem;\n  margin-top:4px;\n}\n\n/* 4) Telefone em footer simples */\n.contact{\n  margin-top:24px;\n  text-align:center;\n  padding:12px 0;\n}\n\n.contact a{\n  color:var(--muted);\n  text-decoration:none;\n  font-size:.95rem;\n}\n\n.contact a:hover{\n  color:var(--accent);\n}","size_bytes":2258},"client/src/components/NewServiceCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock } from \"lucide-react\";\n\nimport type { Service } from \"@shared/schema\";\n\ninterface NewServiceCardProps {\n  service: Service;\n  selectedVehicleType: 'auto' | 'suv' | 'camioneta' | null;\n  language: 'es' | 'pt';\n  onReserve: (serviceSlug: string) => void;\n}\n\nexport default function NewServiceCard({ \n  service,\n  selectedVehicleType,\n  language,\n  onReserve\n}: NewServiceCardProps) {\n  const title = language === 'es' ? service.titleEs : service.titlePt;\n  const subtitle = language === 'es' ? service.subtitleEs : service.subtitlePt;\n  const copy = language === 'es' ? service.copyEs : service.copyPt;\n  \n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('es-PY', {\n      style: 'currency',\n      currency: 'PYG',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const getPrice = () => {\n    if (!selectedVehicleType) return null;\n    return service.prices[selectedVehicleType];\n  };\n\n  const vehicleNames = {\n    es: { auto: \"Auto\", suv: \"SUV\", camioneta: \"Camioneta\" },\n    pt: { auto: \"Auto\", suv: \"SUV\", camioneta: \"Caminhonete\" }\n  };\n\n  const buttonText = language === 'es' ? 'Reservar' : 'Reservar';\n  const selectVehicleText = language === 'es' \n    ? 'Selecciona tu veh√≠culo para ver precio' \n    : 'Selecione seu ve√≠culo para ver pre√ßo';\n  \n  const price = getPrice();\n  const vehicleName = selectedVehicleType ? vehicleNames[language][selectedVehicleType] : '';\n\n  return (\n    <Card \n      className=\"w-full hover-elevate\"\n      data-testid={`card-service-${service.slug}`}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <CardTitle className=\"text-lg font-bold text-foreground leading-tight\">\n            {title}\n          </CardTitle>\n          {service.durationMin && (\n            <div className=\"flex items-center gap-1 text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n              <Clock className=\"h-3 w-3\" />\n              <span>{service.durationMin} min</span>\n            </div>\n          )}\n        </div>\n        \n        {/* Descri√ß√£o em cinza claro */}\n        <p className=\"text-sm text-gray-400 mt-2 leading-relaxed\">\n          {subtitle}\n        </p>\n      </CardHeader>\n\n      <CardContent className=\"py-4\">\n        {/* Pre√ßo destacado em vermelho */}\n        <div className=\"mb-4\">\n          {price ? (\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-600 mb-1\">\n                {formatPrice(price)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                para {vehicleName}\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center text-sm text-muted-foreground py-2\">\n              {selectVehicleText}\n            </div>\n          )}\n        </div>\n\n        {/* Copy adicional */}\n        {copy && (\n          <p className=\"text-xs text-muted-foreground text-center italic\">\n            {copy}\n          </p>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"pt-2\">\n        <Button\n          onClick={() => onReserve(service.slug)}\n          disabled={!selectedVehicleType}\n          variant=\"destructive\"\n          className=\"w-full font-medium py-2.5\"\n          data-testid={`button-reserve-${service.slug}`}\n        >\n          {buttonText}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":3552},"client/src/components/BookingsTable.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport StatusBadge from \"./StatusBadge\";\nimport { Search, Play, Check, X, Eye, ArrowLeft, ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface Booking {\n  id: string;\n  serviceName: string;\n  vehiclePlate: string;\n  date: string;\n  timeSlot: string;\n  status: 'waiting' | 'washing' | 'done' | 'cancelled';\n  price: number;\n  paymentMethod?: 'card' | 'pix' | 'cash';\n  paymentStatus?: 'pending' | 'paid' | 'failed';\n  userPhone?: string;\n  userName?: string;\n}\n\ninterface BookingsTableProps {\n  bookings: Booking[];\n  title: string;\n  onStatusUpdate: (bookingId: string, newStatus: string) => void;\n  onViewDetails: (bookingId: string) => void;\n  onBack: () => void;\n  filterStatus?: string;\n}\n\nexport default function BookingsTable({ \n  bookings, \n  title, \n  onStatusUpdate, \n  onViewDetails, \n  onBack,\n  filterStatus \n}: BookingsTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  // Filter bookings based on search and status\n  const filteredBookings = bookings.filter((booking) => {\n    const matchesSearch = \n      booking.vehiclePlate.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (booking.userName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n      booking.serviceName.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = !filterStatus || booking.status === filterStatus;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  // Pagination\n  const totalPages = Math.ceil(filteredBookings.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedBookings = filteredBookings.slice(startIndex, startIndex + itemsPerPage);\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('es-PY', {\n      style: 'currency',\n      currency: 'PYG',\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const getPaymentMethodText = (method?: string) => {\n    switch (method) {\n      case 'card': return 'Tarjeta';\n      case 'pix': return 'PIX';\n      case 'cash': return 'Efectivo';\n      default: return 'No definido';\n    }\n  };\n\n  const getPaymentStatusColor = (status?: string) => {\n    switch (status) {\n      case 'paid': return 'bg-green-100 text-green-600';\n      case 'failed': return 'bg-red-100 text-red-600';\n      default: return 'bg-yellow-100 text-yellow-600';\n    }\n  };\n\n  const handleStatusUpdate = (bookingId: string, newStatus: string) => {\n    onStatusUpdate(bookingId, newStatus);\n  };\n\n  const getStatusActions = (booking: Booking) => {\n    const actions = [];\n    \n    if (booking.status === 'waiting') {\n      actions.push(\n        <Button\n          key=\"start\"\n          size=\"sm\"\n          variant=\"outline\"\n          className=\"text-orange-600 hover:bg-orange-50\"\n          onClick={() => handleStatusUpdate(booking.id, 'washing')}\n          data-testid={`button-start-washing-${booking.id}`}\n        >\n          <Play className=\"h-3 w-3 mr-1\" />\n          Iniciar\n        </Button>\n      );\n    }\n    \n    if (booking.status === 'washing') {\n      actions.push(\n        <Button\n          key=\"finish\"\n          size=\"sm\"\n          variant=\"outline\"\n          className=\"text-green-600 hover:bg-green-50\"\n          onClick={() => handleStatusUpdate(booking.id, 'done')}\n          data-testid={`button-finish-washing-${booking.id}`}\n        >\n          <Check className=\"h-3 w-3 mr-1\" />\n          Finalizar\n        </Button>\n      );\n    }\n    \n    if (booking.status !== 'done' && booking.status !== 'cancelled') {\n      actions.push(\n        <Button\n          key=\"cancel\"\n          size=\"sm\"\n          variant=\"outline\"\n          className=\"text-red-600 hover:bg-red-50\"\n          onClick={() => handleStatusUpdate(booking.id, 'cancelled')}\n          data-testid={`button-cancel-${booking.id}`}\n        >\n          <X className=\"h-3 w-3 mr-1\" />\n          Cancelar\n        </Button>\n      );\n    }\n    \n    actions.push(\n      <Button\n        key=\"view\"\n        size=\"sm\"\n        variant=\"ghost\"\n        onClick={() => onViewDetails(booking.id)}\n        data-testid={`button-view-details-${booking.id}`}\n      >\n        <Eye className=\"h-3 w-3 mr-1\" />\n        Ver\n      </Button>\n    );\n\n    return actions;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onBack}\n                data-testid=\"button-back-to-dashboard\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n              </Button>\n              {title}\n            </CardTitle>\n            <CardDescription>\n              {filteredBookings.length} reserva{filteredBookings.length !== 1 ? 's' : ''} encontrada{filteredBookings.length !== 1 ? 's' : ''}\n            </CardDescription>\n          </div>\n        </div>\n        \n        {/* Search Bar */}\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"relative flex-1 max-w-sm\">\n            <Search className=\"absolute left-2 top-1/2 h-4 w-4 text-gray-400 transform -translate-y-1/2\" />\n            <Input\n              placeholder=\"Buscar por placa o nombre...\"\n              value={searchTerm}\n              onChange={(e) => {\n                setSearchTerm(e.target.value);\n                setCurrentPage(1); // Reset to first page on search\n              }}\n              className=\"pl-8\"\n              data-testid=\"input-search-bookings\"\n            />\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Cliente</TableHead>\n              <TableHead>Veh√≠culo/Placa</TableHead>\n              <TableHead>Servicio</TableHead>\n              <TableHead>Hora</TableHead>\n              <TableHead>Estado</TableHead>\n              <TableHead>Pago</TableHead>\n              <TableHead className=\"text-right\">Acciones</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {paginatedBookings.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                  {searchTerm ? 'No se encontraron reservas con ese criterio de b√∫squeda' : 'No hay reservas para mostrar'}\n                </TableCell>\n              </TableRow>\n            ) : (\n              paginatedBookings.map((booking) => (\n                <TableRow key={booking.id} data-testid={`row-booking-${booking.id}`}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{booking.userName || 'Cliente'}</div>\n                      <div className=\"text-sm text-muted-foreground\">{booking.userPhone || ''}</div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"font-mono text-sm\">{booking.vehiclePlate}</div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"max-w-xs truncate\">{booking.serviceName}</div>\n                    <div className=\"text-sm text-muted-foreground\">{formatPrice(booking.price)}</div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      <div>{new Date(booking.date).toLocaleDateString('es-ES')}</div>\n                      <div className=\"text-muted-foreground\">{booking.timeSlot}</div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <StatusBadge status={booking.status} size=\"sm\" />\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {getPaymentMethodText(booking.paymentMethod)}\n                      </Badge>\n                      <div>\n                        <Badge \n                          variant=\"outline\" \n                          className={`text-xs ${getPaymentStatusColor(booking.paymentStatus)}`}\n                        >\n                          {booking.paymentStatus || 'Pendiente'}\n                        </Badge>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex justify-end space-x-1\">\n                      {getStatusActions(booking)}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between px-6 py-4 border-t\">\n            <div className=\"text-sm text-muted-foreground\">\n              Mostrando {startIndex + 1} a {Math.min(startIndex + itemsPerPage, filteredBookings.length)} de {filteredBookings.length} reservas\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                disabled={currentPage === 1}\n                data-testid=\"button-prev-page\"\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Anterior\n              </Button>\n              <span className=\"text-sm font-medium\">\n                P√°gina {currentPage} de {totalPages}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                disabled={currentPage === totalPages}\n                data-testid=\"button-next-page\"\n              >\n                Siguiente\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10558},"client/src/components/MiniAnalytics.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Booking {\n  id: string;\n  serviceName: string;\n  status: 'waiting' | 'washing' | 'done' | 'cancelled';\n  price: number;\n  paymentMethod?: 'card' | 'pix' | 'cash';\n}\n\ninterface MiniAnalyticsProps {\n  bookings: Booking[];\n}\n\nexport default function MiniAnalytics({ bookings }: MiniAnalyticsProps) {\n  // Calculate most requested services (today)\n  const todayBookings = bookings.filter(b => b.status !== 'cancelled');\n  const serviceStats = todayBookings.reduce((acc, booking) => {\n    const serviceName = booking.serviceName;\n    if (!acc[serviceName]) {\n      acc[serviceName] = 0;\n    }\n    acc[serviceName]++;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const sortedServices = Object.entries(serviceStats)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 5); // Top 5 services\n\n  const maxCount = sortedServices[0]?.[1] || 1;\n\n  // Calculate revenue by payment method (today)\n  const completedBookings = bookings.filter(b => b.status === 'done');\n  const paymentStats = completedBookings.reduce((acc, booking) => {\n    const method = booking.paymentMethod || 'cash';\n    if (!acc[method]) {\n      acc[method] = { count: 0, total: 0 };\n    }\n    acc[method].count++;\n    acc[method].total += booking.price;\n    return acc;\n  }, {} as Record<string, { count: number; total: number }>);\n\n  const totalRevenue = Object.values(paymentStats).reduce((sum, stat) => sum + stat.total, 0);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-PY', {\n      style: 'currency',\n      currency: 'PYG',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getPaymentMethodText = (method: string) => {\n    switch (method) {\n      case 'card': return 'Tarjeta';\n      case 'pix': return 'PIX';\n      case 'cash': return 'Efectivo';\n      default: return method;\n    }\n  };\n\n  const getPaymentMethodColor = (method: string) => {\n    switch (method) {\n      case 'card': return 'bg-blue-100 text-blue-700';\n      case 'pix': return 'bg-green-100 text-green-700';\n      case 'cash': return 'bg-gray-100 text-gray-700';\n      default: return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Most Requested Services - Bar Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <span>üìä</span>\n            Servicios M√°s Solicitados\n          </CardTitle>\n          <CardDescription>\n            Ranking de servicios m√°s pedidos hoy ({todayBookings.length} reservas)\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {sortedServices.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-4\">\n              No hay datos de servicios para mostrar\n            </p>\n          ) : (\n            sortedServices.map(([service, count], index) => {\n              const percentage = (count / maxCount) * 100;\n              return (\n                <div key={service} className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        #{index + 1}\n                      </Badge>\n                      <span className=\"text-sm font-medium truncate max-w-[200px]\" title={service}>\n                        {service}\n                      </span>\n                    </div>\n                    <span className=\"text-sm font-bold text-primary\">\n                      {count} vez{count !== 1 ? 'es' : ''}\n                    </span>\n                  </div>\n                  <Progress value={percentage} className=\"h-2\" />\n                </div>\n              );\n            })\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Revenue by Payment Method - Pie Chart Style */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <span>üí≥</span>\n            Ingresos por M√©todo de Pago\n          </CardTitle>\n          <CardDescription>\n            Distribuci√≥n de ingresos de hoy ({completedBookings.length} pagos)\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {Object.keys(paymentStats).length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-4\">\n              No hay pagos completados para mostrar\n            </p>\n          ) : (\n            <>\n              {/* Payment Method Stats */}\n              <div className=\"space-y-3\">\n                {Object.entries(paymentStats).map(([method, data]) => {\n                  const percentage = totalRevenue > 0 ? (data.total / totalRevenue) * 100 : 0;\n                  return (\n                    <div key={method} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={getPaymentMethodColor(method)}>\n                            {getPaymentMethodText(method)}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground\">\n                            ({data.count} pago{data.count !== 1 ? 's' : ''})\n                          </span>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold text-green-600\">\n                            {formatCurrency(data.total)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {percentage.toFixed(1)}%\n                          </div>\n                        </div>\n                      </div>\n                      <Progress value={percentage} className=\"h-2\" />\n                    </div>\n                  );\n                })}\n              </div>\n\n              {/* Total */}\n              <div className=\"pt-4 border-t\">\n                <div className=\"flex justify-between items-center font-bold\">\n                  <span>Total Recaudado:</span>\n                  <span className=\"text-primary text-lg\">\n                    {formatCurrency(totalRevenue)}\n                  </span>\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6642},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface BookingNotification {\n  booking: any;\n  message?: string;\n}\n\nexport function useWebSocket() {\n  const socketRef = useRef<Socket | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Initialize socket connection\n    const socket = io({\n      autoConnect: false\n    });\n    \n    socketRef.current = socket;\n\n    // Handle connection events\n    socket.on('connect', () => {\n      console.log('WebSocket connected:', socket.id);\n    });\n\n    socket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n    });\n\n    // Handle new booking notifications\n    socket.on('new-booking', (data: BookingNotification) => {\n      console.log('New booking received:', data.booking);\n      \n      // Invalidate bookings query to refresh admin dashboard\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings/today'] });\n      \n      // Show notification toast\n      toast({\n        title: \"üÜï Nueva Reserva\",\n        description: data.message || `Nueva reserva recibida a las ${data.booking.timeSlot}`,\n        duration: 8000,\n      });\n      \n      // Optional: Play notification sound\n      if (typeof Audio !== 'undefined') {\n        try {\n          const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYfCjiS2/PKeSQFLIHN8tiJOQcZaLvt559NEAxQp+PwtmMcBjiS2+/MeiQFLYDN8tiJOQgZaLvs55pOEAxQpOPxtmQcBjiS2/LNeSMFLYDN8tiJOQYZZ7zs55pOEAxQpOPxtmQcBjiS2/LNeSMFLYDN8tiJOQcZZ7vs55pNEAxQpOPxtmQcBjiS2/LNeSMFLYDN8tiJOQcZZ7vs55pOEAwP');\n          audio.volume = 0.1;\n          audio.play().catch(() => {\n            // Ignore audio errors (user interaction required)\n          });\n        } catch (error) {\n          // Ignore audio errors\n        }\n      }\n    });\n\n    // Handle booking status updates\n    socket.on('booking-updated', (data: BookingNotification) => {\n      console.log('Booking updated:', data.booking);\n      \n      // Invalidate bookings query to refresh admin dashboard\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings/today'] });\n    });\n\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, [toast]);\n\n  const joinAdminRoom = () => {\n    if (socketRef.current) {\n      socketRef.current.connect();\n      // Send admin token for authentication\n      const adminToken = import.meta.env.VITE_ADMIN_WS_TOKEN || 'admin-secret-key';\n      socketRef.current.emit('join-admin', adminToken);\n      \n      // Handle auth errors\n      socketRef.current.on('auth-error', (message) => {\n        console.error('Admin WebSocket auth error:', message);\n        toast({\n          title: \"‚ö†Ô∏è Error de Autenticaci√≥n\",\n          description: \"No autorizado para recibir actualizaciones de admin\",\n          variant: \"destructive\",\n        });\n      });\n    }\n  };\n\n  const disconnect = () => {\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n  };\n\n  return {\n    socket: socketRef.current,\n    joinAdminRoom,\n    disconnect\n  };\n}","size_bytes":3319}},"version":1}